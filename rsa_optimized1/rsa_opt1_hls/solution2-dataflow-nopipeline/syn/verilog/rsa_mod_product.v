// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
// Version: 2022.2
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module rsa_mod_product (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        a,
        b,
        N,
        ap_return
);

parameter    ap_ST_fsm_state1 = 5'd1;
parameter    ap_ST_fsm_state2 = 5'd2;
parameter    ap_ST_fsm_state3 = 5'd4;
parameter    ap_ST_fsm_state4 = 5'd8;
parameter    ap_ST_fsm_state5 = 5'd16;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [255:0] a;
input  [255:0] b;
input  [255:0] N;
output  [255:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;

(* fsm_encoding = "none" *) reg   [4:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [257:0] conv_i167_fu_77_p1;
reg   [257:0] conv_i167_reg_274;
wire   [256:0] zext_ln1496_fu_81_p1;
reg   [256:0] zext_ln1496_reg_280;
reg   [256:0] lhs_load_1_reg_289;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln13_fu_108_p2;
wire   [0:0] icmp_ln1035_fu_151_p2;
reg   [0:0] icmp_ln1035_reg_308;
wire   [256:0] t_V_1_fu_156_p2;
reg   [256:0] t_V_1_reg_313;
wire   [257:0] grp_fu_131_p2;
reg   [257:0] ret_V_reg_319;
wire    ap_CS_fsm_state3;
wire   [256:0] grp_fu_137_p2;
reg   [256:0] m_V_reg_324;
wire   [256:0] m_V_3_fu_216_p3;
reg   [256:0] m_V_3_reg_330;
wire    ap_CS_fsm_state4;
reg   [256:0] lhs_fu_36;
wire    ap_CS_fsm_state5;
reg   [256:0] lhs_1_fu_40;
wire   [256:0] t_V_2_fu_181_p3;
wire   [256:0] zext_ln186_fu_73_p1;
reg   [8:0] i_fu_44;
wire   [8:0] i_2_fu_114_p2;
reg   [255:0] empty_fu_48;
wire   [255:0] zext_ln1669_fu_233_p1;
wire   [257:0] grp_fu_131_p0;
wire   [257:0] grp_fu_131_p1;
wire   [257:0] ret_V_1_fu_143_p3;
wire   [256:0] grp_fu_162_p0;
wire   [256:0] grp_fu_162_p2;
wire   [0:0] trunc_ln1497_fu_195_p1;
wire   [0:0] icmp_ln1031_fu_199_p2;
wire   [0:0] and_ln1031_fu_203_p2;
wire   [256:0] grp_fu_176_p2;
wire   [256:0] m_V_2_fu_209_p3;
wire   [254:0] r_V_fu_223_p4;
reg   [4:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
wire    ap_ST_fsm_state4_blk;
wire    ap_ST_fsm_state5_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 5'd1;
end

rsa_add_258ns_258ns_258_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 258 ),
    .din1_WIDTH( 258 ),
    .dout_WIDTH( 258 ))
add_258ns_258ns_258_2_1_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_131_p0),
    .din1(grp_fu_131_p1),
    .ce(1'b1),
    .dout(grp_fu_131_p2)
);

rsa_add_257ns_257ns_257_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 257 ),
    .din1_WIDTH( 257 ),
    .dout_WIDTH( 257 ))
add_257ns_257ns_257_2_1_U2(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(lhs_fu_36),
    .din1(lhs_1_fu_40),
    .ce(1'b1),
    .dout(grp_fu_137_p2)
);

rsa_sub_257ns_257ns_257_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 257 ),
    .din1_WIDTH( 257 ),
    .dout_WIDTH( 257 ))
sub_257ns_257ns_257_2_1_U3(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_162_p0),
    .din1(zext_ln1496_reg_280),
    .ce(1'b1),
    .dout(grp_fu_162_p2)
);

rsa_sub_257ns_257ns_257_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 257 ),
    .din1_WIDTH( 257 ),
    .dout_WIDTH( 257 ))
sub_257ns_257ns_257_2_1_U4(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_137_p2),
    .din1(zext_ln1496_reg_280),
    .ce(1'b1),
    .dout(grp_fu_176_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        empty_fu_48 <= a;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        empty_fu_48 <= zext_ln1669_fu_233_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_fu_44 <= 9'd0;
    end else if (((icmp_ln13_fu_108_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        i_fu_44 <= i_2_fu_114_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        lhs_1_fu_40 <= zext_ln186_fu_73_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        lhs_1_fu_40 <= t_V_2_fu_181_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        lhs_fu_36 <= 257'd0;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        lhs_fu_36 <= m_V_3_reg_330;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        conv_i167_reg_274[255 : 0] <= conv_i167_fu_77_p1[255 : 0];
        zext_ln1496_reg_280[255 : 0] <= zext_ln1496_fu_81_p1[255 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln13_fu_108_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        icmp_ln1035_reg_308 <= icmp_ln1035_fu_151_p2;
        lhs_load_1_reg_289 <= lhs_fu_36;
        t_V_1_reg_313[256 : 1] <= t_V_1_fu_156_p2[256 : 1];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        m_V_3_reg_330 <= m_V_3_fu_216_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        m_V_reg_324 <= grp_fu_137_p2;
        ret_V_reg_319 <= grp_fu_131_p2;
    end
end

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

assign ap_ST_fsm_state3_blk = 1'b0;

assign ap_ST_fsm_state4_blk = 1'b0;

assign ap_ST_fsm_state5_blk = 1'b0;

always @ (*) begin
    if ((((icmp_ln13_fu_108_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)) | ((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln13_fu_108_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln13_fu_108_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign and_ln1031_fu_203_p2 = (trunc_ln1497_fu_195_p1 & icmp_ln1031_fu_199_p2);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_return = lhs_fu_36[255:0];

assign conv_i167_fu_77_p1 = N;

assign grp_fu_131_p0 = lhs_fu_36;

assign grp_fu_131_p1 = lhs_1_fu_40;

assign grp_fu_162_p0 = lhs_1_fu_40 << 257'd1;

assign i_2_fu_114_p2 = (i_fu_44 + 9'd1);

assign icmp_ln1031_fu_199_p2 = ((ret_V_reg_319 < conv_i167_reg_274) ? 1'b1 : 1'b0);

assign icmp_ln1035_fu_151_p2 = ((ret_V_1_fu_143_p3 > conv_i167_reg_274) ? 1'b1 : 1'b0);

assign icmp_ln13_fu_108_p2 = ((i_fu_44 == 9'd256) ? 1'b1 : 1'b0);

assign m_V_2_fu_209_p3 = ((and_ln1031_fu_203_p2[0:0] == 1'b1) ? m_V_reg_324 : grp_fu_176_p2);

assign m_V_3_fu_216_p3 = ((trunc_ln1497_fu_195_p1[0:0] == 1'b1) ? m_V_2_fu_209_p3 : lhs_load_1_reg_289);

assign r_V_fu_223_p4 = {{empty_fu_48[255:1]}};

assign ret_V_1_fu_143_p3 = {{lhs_1_fu_40}, {1'd0}};

assign t_V_1_fu_156_p2 = lhs_1_fu_40 << 257'd1;

assign t_V_2_fu_181_p3 = ((icmp_ln1035_reg_308[0:0] == 1'b1) ? grp_fu_162_p2 : t_V_1_reg_313);

assign trunc_ln1497_fu_195_p1 = empty_fu_48[0:0];

assign zext_ln1496_fu_81_p1 = N;

assign zext_ln1669_fu_233_p1 = r_V_fu_223_p4;

assign zext_ln186_fu_73_p1 = b;

always @ (posedge ap_clk) begin
    conv_i167_reg_274[257:256] <= 2'b00;
    zext_ln1496_reg_280[256] <= 1'b0;
    t_V_1_reg_313[0] <= 1'b0;
end

endmodule //rsa_mod_product
