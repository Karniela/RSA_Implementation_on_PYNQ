// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
// Version: 2022.2
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="rsa_rsa,hls_ip_2022_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=dataflow,HLS_SYN_CLOCK=6.882000,HLS_SYN_LAT=394753,HLS_SYN_TPT=394754,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=7648,HLS_SYN_LUT=3870,HLS_VERSION=2022_2}" *)

module rsa (
        s_axi_control_AWVALID,
        s_axi_control_AWREADY,
        s_axi_control_AWADDR,
        s_axi_control_WVALID,
        s_axi_control_WREADY,
        s_axi_control_WDATA,
        s_axi_control_WSTRB,
        s_axi_control_ARVALID,
        s_axi_control_ARREADY,
        s_axi_control_ARADDR,
        s_axi_control_RVALID,
        s_axi_control_RREADY,
        s_axi_control_RDATA,
        s_axi_control_RRESP,
        s_axi_control_BVALID,
        s_axi_control_BREADY,
        s_axi_control_BRESP,
        ap_clk,
        ap_rst_n,
        interrupt
);

parameter    C_S_AXI_CONTROL_DATA_WIDTH = 32;
parameter    C_S_AXI_CONTROL_ADDR_WIDTH = 8;
parameter    C_S_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_CONTROL_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);

input   s_axi_control_AWVALID;
output   s_axi_control_AWREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_AWADDR;
input   s_axi_control_WVALID;
output   s_axi_control_WREADY;
input  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_WDATA;
input  [C_S_AXI_CONTROL_WSTRB_WIDTH - 1:0] s_axi_control_WSTRB;
input   s_axi_control_ARVALID;
output   s_axi_control_ARREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_ARADDR;
output   s_axi_control_RVALID;
input   s_axi_control_RREADY;
output  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_RDATA;
output  [1:0] s_axi_control_RRESP;
output   s_axi_control_BVALID;
input   s_axi_control_BREADY;
output  [1:0] s_axi_control_BRESP;
input   ap_clk;
input   ap_rst_n;
output   interrupt;

 reg    ap_rst_n_inv;
wire   [255:0] d;
wire   [255:0] N;
wire   [255:0] y;
wire    ap_start;
wire    ap_ready;
wire    ap_done;
wire    ap_idle;
wire    mod_exp_U0_ap_start;
wire    mod_exp_U0_ap_done;
wire    mod_exp_U0_ap_continue;
wire    mod_exp_U0_ap_idle;
wire    mod_exp_U0_ap_ready;
wire   [255:0] mod_exp_U0_ap_return;
wire    result_V_full_n;
wire    Block_entry46_proc_U0_ap_start;
wire    Block_entry46_proc_U0_ap_done;
wire    Block_entry46_proc_U0_ap_continue;
wire    Block_entry46_proc_U0_ap_idle;
wire    Block_entry46_proc_U0_ap_ready;
wire   [255:0] Block_entry46_proc_U0_x;
wire    Block_entry46_proc_U0_x_ap_vld;
wire   [255:0] result_V_dout;
wire   [1:0] result_V_num_data_valid;
wire   [1:0] result_V_fifo_cap;
wire    result_V_empty_n;

rsa_control_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CONTROL_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CONTROL_DATA_WIDTH ))
control_s_axi_U(
    .AWVALID(s_axi_control_AWVALID),
    .AWREADY(s_axi_control_AWREADY),
    .AWADDR(s_axi_control_AWADDR),
    .WVALID(s_axi_control_WVALID),
    .WREADY(s_axi_control_WREADY),
    .WDATA(s_axi_control_WDATA),
    .WSTRB(s_axi_control_WSTRB),
    .ARVALID(s_axi_control_ARVALID),
    .ARREADY(s_axi_control_ARREADY),
    .ARADDR(s_axi_control_ARADDR),
    .RVALID(s_axi_control_RVALID),
    .RREADY(s_axi_control_RREADY),
    .RDATA(s_axi_control_RDATA),
    .RRESP(s_axi_control_RRESP),
    .BVALID(s_axi_control_BVALID),
    .BREADY(s_axi_control_BREADY),
    .BRESP(s_axi_control_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .d(d),
    .N(N),
    .y(y),
    .x(Block_entry46_proc_U0_x),
    .x_ap_vld(Block_entry46_proc_U0_x_ap_vld),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle)
);

rsa_mod_exp mod_exp_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(mod_exp_U0_ap_start),
    .ap_done(mod_exp_U0_ap_done),
    .ap_continue(mod_exp_U0_ap_continue),
    .ap_idle(mod_exp_U0_ap_idle),
    .ap_ready(mod_exp_U0_ap_ready),
    .y(y),
    .d(d),
    .N(N),
    .ap_return(mod_exp_U0_ap_return)
);

rsa_Block_entry46_proc Block_entry46_proc_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(Block_entry46_proc_U0_ap_start),
    .ap_done(Block_entry46_proc_U0_ap_done),
    .ap_continue(Block_entry46_proc_U0_ap_continue),
    .ap_idle(Block_entry46_proc_U0_ap_idle),
    .ap_ready(Block_entry46_proc_U0_ap_ready),
    .p_read(result_V_dout),
    .x(Block_entry46_proc_U0_x),
    .x_ap_vld(Block_entry46_proc_U0_x_ap_vld)
);

rsa_fifo_w256_d2_S result_V_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(mod_exp_U0_ap_return),
    .if_full_n(result_V_full_n),
    .if_write(mod_exp_U0_ap_done),
    .if_dout(result_V_dout),
    .if_num_data_valid(result_V_num_data_valid),
    .if_fifo_cap(result_V_fifo_cap),
    .if_empty_n(result_V_empty_n),
    .if_read(Block_entry46_proc_U0_ap_ready)
);

assign Block_entry46_proc_U0_ap_continue = 1'b1;

assign Block_entry46_proc_U0_ap_start = result_V_empty_n;

assign ap_done = Block_entry46_proc_U0_ap_done;

assign ap_idle = (mod_exp_U0_ap_idle & (result_V_empty_n ^ 1'b1) & Block_entry46_proc_U0_ap_idle);

assign ap_ready = mod_exp_U0_ap_ready;

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign mod_exp_U0_ap_continue = result_V_full_n;

assign mod_exp_U0_ap_start = ap_start;

endmodule //rsa
