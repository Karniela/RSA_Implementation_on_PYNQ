// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
// Version: 2022.2
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module rsa_mod_exp (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        y,
        d,
        N,
        ap_return
);

parameter    ap_ST_fsm_state1 = 6'd1;
parameter    ap_ST_fsm_state2 = 6'd2;
parameter    ap_ST_fsm_state3 = 6'd4;
parameter    ap_ST_fsm_state4 = 6'd8;
parameter    ap_ST_fsm_state5 = 6'd16;
parameter    ap_ST_fsm_state6 = 6'd32;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [15:0] y;
input  [15:0] d;
input  [15:0] N;
output  [15:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[15:0] ap_return;

(* fsm_encoding = "none" *) reg   [5:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [16:0] zext_ln42_fu_195_p1;
reg   [16:0] zext_ln42_reg_556;
reg   [15:0] grp_load_fu_189_p1;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln42_fu_225_p2;
reg   [0:0] icmp_ln42_reg_573;
wire   [4:0] i_8_fu_231_p2;
reg   [4:0] i_8_reg_577;
wire   [0:0] trunc_ln11_fu_237_p1;
reg   [0:0] trunc_ln11_reg_582;
wire   [4:0] i_6_fu_247_p2;
wire    ap_CS_fsm_state3;
wire   [15:0] select_ln13_fu_301_p3;
wire   [0:0] icmp_ln13_fu_241_p2;
wire   [15:0] t_V_10_fu_333_p3;
wire   [15:0] zext_ln1669_fu_351_p1;
reg   [15:0] a_V_load_reg_613;
wire    ap_CS_fsm_state4;
wire   [4:0] i_7_fu_372_p2;
wire    ap_CS_fsm_state5;
wire   [15:0] m_V_fu_426_p3;
wire   [0:0] icmp_ln13_1_fu_366_p2;
wire   [15:0] t_V_14_fu_458_p3;
wire   [15:0] zext_ln1669_1_fu_476_p1;
reg   [15:0] empty_15_reg_78;
wire   [0:0] icmp_ln1019_fu_355_p2;
reg   [15:0] empty_16_reg_90;
reg   [4:0] i_1_reg_99;
reg   [15:0] t_V_reg_110;
reg   [15:0] p_0_0_0274_ph_reg_119;
reg   [15:0] empty_18_reg_129;
wire   [0:0] icmp_ln1019_1_fu_480_p2;
reg   [15:0] empty_19_reg_141;
reg   [4:0] i_3_reg_150;
reg   [15:0] t_V_5_reg_161;
reg   [15:0] p_lcssa1_reg_170;
reg   [15:0] ap_phi_mux_m_V_1_phi_fu_183_p4;
reg   [15:0] m_V_1_reg_180;
wire    ap_CS_fsm_state6;
wire   [0:0] icmp_ln1019_2_fu_500_p2;
reg   [4:0] i_fu_44;
reg   [15:0] conv3_i3_fu_48;
wire   [15:0] zext_ln1669_2_fu_496_p1;
reg   [15:0] t_V_1_fu_52;
reg   [15:0] a_V_fu_56;
reg   [15:0] ap_sig_allocacmp_a_V_load;
wire   [16:0] zext_ln1495_1_fu_257_p1;
wire   [16:0] zext_ln1495_fu_253_p1;
wire   [16:0] ret_V_fu_261_p2;
wire   [15:0] add_ln186_fu_272_p2;
wire   [0:0] trunc_ln13_fu_283_p1;
wire   [0:0] icmp_ln1031_fu_267_p2;
wire   [0:0] and_ln1031_fu_287_p2;
wire   [15:0] sub_ln186_fu_278_p2;
wire   [15:0] select_ln1031_fu_293_p3;
wire   [16:0] ret_V_1_fu_309_p3;
wire   [15:0] t_V_6_fu_322_p2;
wire   [0:0] icmp_ln1035_fu_317_p2;
wire   [15:0] t_V_7_fu_328_p2;
wire   [14:0] r_V_fu_341_p4;
wire   [16:0] zext_ln1495_3_fu_382_p1;
wire   [16:0] zext_ln1495_2_fu_378_p1;
wire   [16:0] ret_V_2_fu_386_p2;
wire   [15:0] add_ln186_1_fu_397_p2;
wire   [0:0] trunc_ln13_1_fu_408_p1;
wire   [0:0] icmp_ln1031_1_fu_392_p2;
wire   [0:0] and_ln1031_1_fu_412_p2;
wire   [15:0] sub_ln186_2_fu_403_p2;
wire   [15:0] select_ln1031_1_fu_418_p3;
wire   [16:0] ret_V_3_fu_434_p3;
wire   [15:0] t_V_12_fu_447_p2;
wire   [0:0] icmp_ln1035_1_fu_442_p2;
wire   [15:0] t_V_13_fu_453_p2;
wire   [14:0] r_V_1_fu_466_p4;
wire   [14:0] r_V_2_fu_486_p4;
reg   [15:0] ap_return_preg;
reg   [5:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
wire    ap_ST_fsm_state4_blk;
wire    ap_ST_fsm_state5_blk;
wire    ap_ST_fsm_state6_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 6'd1;
#0 ap_return_preg = 16'd0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_preg <= 16'd0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state6) & ((icmp_ln42_reg_573 == 1'd1) | (icmp_ln1019_2_fu_500_p2 == 1'd1)))) begin
            ap_return_preg <= ap_phi_mux_m_V_1_phi_fu_183_p4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        a_V_fu_56 <= 16'd1;
    end else if (((trunc_ln11_reg_582 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        a_V_fu_56 <= p_0_0_0274_ph_reg_119;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        conv3_i3_fu_48 <= d;
    end else if (((icmp_ln42_reg_573 == 1'd0) & (1'b1 == ap_CS_fsm_state6) & (icmp_ln1019_2_fu_500_p2 == 1'd0))) begin
        conv3_i3_fu_48 <= zext_ln1669_2_fu_496_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((trunc_ln11_fu_237_p1 == 1'd1) & (icmp_ln42_fu_225_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        empty_15_reg_78 <= 16'd0;
    end else if (((icmp_ln1019_fu_355_p2 == 1'd0) & (icmp_ln13_fu_241_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        empty_15_reg_78 <= select_ln13_fu_301_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((trunc_ln11_fu_237_p1 == 1'd1) & (icmp_ln42_fu_225_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        empty_16_reg_90 <= grp_load_fu_189_p1;
    end else if (((icmp_ln1019_fu_355_p2 == 1'd0) & (icmp_ln13_fu_241_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        empty_16_reg_90 <= zext_ln1669_fu_351_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln13_1_fu_366_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5) & (icmp_ln1019_1_fu_480_p2 == 1'd0))) begin
        empty_18_reg_129 <= m_V_fu_426_p3;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        empty_18_reg_129 <= 16'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln13_1_fu_366_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5) & (icmp_ln1019_1_fu_480_p2 == 1'd0))) begin
        empty_19_reg_141 <= zext_ln1669_1_fu_476_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        empty_19_reg_141 <= t_V_1_fu_52;
    end
end

always @ (posedge ap_clk) begin
    if (((trunc_ln11_fu_237_p1 == 1'd1) & (icmp_ln42_fu_225_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        i_1_reg_99 <= 5'd0;
    end else if (((icmp_ln1019_fu_355_p2 == 1'd0) & (icmp_ln13_fu_241_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        i_1_reg_99 <= i_6_fu_247_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln13_1_fu_366_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5) & (icmp_ln1019_1_fu_480_p2 == 1'd0))) begin
        i_3_reg_150 <= i_7_fu_372_p2;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        i_3_reg_150 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_fu_44 <= 5'd0;
    end else if (((icmp_ln42_reg_573 == 1'd0) & (1'b1 == ap_CS_fsm_state6) & (icmp_ln1019_2_fu_500_p2 == 1'd0))) begin
        i_fu_44 <= i_8_reg_577;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln42_reg_573 == 1'd0) & (1'b1 == ap_CS_fsm_state6) & (icmp_ln1019_2_fu_500_p2 == 1'd1))) begin
        m_V_1_reg_180 <= a_V_load_reg_613;
    end else if (((icmp_ln42_fu_225_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        m_V_1_reg_180 <= grp_load_fu_189_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        if (((icmp_ln1019_fu_355_p2 == 1'd1) & (icmp_ln13_fu_241_p2 == 1'd0))) begin
            p_0_0_0274_ph_reg_119 <= select_ln13_fu_301_p3;
        end else if ((icmp_ln13_fu_241_p2 == 1'd1)) begin
            p_0_0_0274_ph_reg_119 <= empty_15_reg_78;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        if (((icmp_ln13_1_fu_366_p2 == 1'd0) & (icmp_ln1019_1_fu_480_p2 == 1'd1))) begin
            p_lcssa1_reg_170 <= m_V_fu_426_p3;
        end else if ((icmp_ln13_1_fu_366_p2 == 1'd1)) begin
            p_lcssa1_reg_170 <= empty_18_reg_129;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        t_V_1_fu_52 <= y;
    end else if (((icmp_ln42_reg_573 == 1'd0) & (1'b1 == ap_CS_fsm_state6) & (icmp_ln1019_2_fu_500_p2 == 1'd0))) begin
        t_V_1_fu_52 <= p_lcssa1_reg_170;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln13_1_fu_366_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5) & (icmp_ln1019_1_fu_480_p2 == 1'd0))) begin
        t_V_5_reg_161 <= t_V_14_fu_458_p3;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        t_V_5_reg_161 <= t_V_1_fu_52;
    end
end

always @ (posedge ap_clk) begin
    if (((trunc_ln11_fu_237_p1 == 1'd1) & (icmp_ln42_fu_225_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        t_V_reg_110 <= t_V_1_fu_52;
    end else if (((icmp_ln1019_fu_355_p2 == 1'd0) & (icmp_ln13_fu_241_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        t_V_reg_110 <= t_V_10_fu_333_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        a_V_load_reg_613 <= grp_load_fu_189_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_8_reg_577 <= i_8_fu_231_p2;
        icmp_ln42_reg_573 <= icmp_ln42_fu_225_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln42_fu_225_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        trunc_ln11_reg_582 <= trunc_ln11_fu_237_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        zext_ln42_reg_556[15 : 0] <= zext_ln42_fu_195_p1[15 : 0];
    end
end

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

assign ap_ST_fsm_state3_blk = 1'b0;

assign ap_ST_fsm_state4_blk = 1'b0;

assign ap_ST_fsm_state5_blk = 1'b0;

assign ap_ST_fsm_state6_blk = 1'b0;

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0)) | ((1'b1 == ap_CS_fsm_state6) & ((icmp_ln42_reg_573 == 1'd1) | (icmp_ln1019_2_fu_500_p2 == 1'd1))))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln42_reg_573 == 1'd0) & (1'b1 == ap_CS_fsm_state6) & (icmp_ln1019_2_fu_500_p2 == 1'd1))) begin
        ap_phi_mux_m_V_1_phi_fu_183_p4 = a_V_load_reg_613;
    end else begin
        ap_phi_mux_m_V_1_phi_fu_183_p4 = m_V_1_reg_180;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) & ((icmp_ln42_reg_573 == 1'd1) | (icmp_ln1019_2_fu_500_p2 == 1'd1)))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) & ((icmp_ln42_reg_573 == 1'd1) | (icmp_ln1019_2_fu_500_p2 == 1'd1)))) begin
        ap_return = ap_phi_mux_m_V_1_phi_fu_183_p4;
    end else begin
        ap_return = ap_return_preg;
    end
end

always @ (*) begin
    if (((trunc_ln11_reg_582 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        ap_sig_allocacmp_a_V_load = p_0_0_0274_ph_reg_119;
    end else begin
        ap_sig_allocacmp_a_V_load = a_V_fu_56;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        grp_load_fu_189_p1 = ap_sig_allocacmp_a_V_load;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        grp_load_fu_189_p1 = a_V_fu_56;
    end else begin
        grp_load_fu_189_p1 = 'bx;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((trunc_ln11_fu_237_p1 == 1'd1) & (icmp_ln42_fu_225_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else if (((trunc_ln11_fu_237_p1 == 1'd0) & (icmp_ln42_fu_225_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((icmp_ln1019_fu_355_p2 == 1'd0) & (icmp_ln13_fu_241_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            if (((icmp_ln13_1_fu_366_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5) & (icmp_ln1019_1_fu_480_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state6 : begin
            if (((1'b1 == ap_CS_fsm_state6) & ((icmp_ln42_reg_573 == 1'd1) | (icmp_ln1019_2_fu_500_p2 == 1'd1)))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln186_1_fu_397_p2 = (t_V_5_reg_161 + empty_18_reg_129);

assign add_ln186_fu_272_p2 = (t_V_reg_110 + empty_15_reg_78);

assign and_ln1031_1_fu_412_p2 = (trunc_ln13_1_fu_408_p1 & icmp_ln1031_1_fu_392_p2);

assign and_ln1031_fu_287_p2 = (trunc_ln13_fu_283_p1 & icmp_ln1031_fu_267_p2);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign i_6_fu_247_p2 = (i_1_reg_99 + 5'd1);

assign i_7_fu_372_p2 = (i_3_reg_150 + 5'd1);

assign i_8_fu_231_p2 = (i_fu_44 + 5'd1);

assign icmp_ln1019_1_fu_480_p2 = ((r_V_1_fu_466_p4 == 15'd0) ? 1'b1 : 1'b0);

assign icmp_ln1019_2_fu_500_p2 = ((r_V_2_fu_486_p4 == 15'd0) ? 1'b1 : 1'b0);

assign icmp_ln1019_fu_355_p2 = ((r_V_fu_341_p4 == 15'd0) ? 1'b1 : 1'b0);

assign icmp_ln1031_1_fu_392_p2 = ((ret_V_2_fu_386_p2 < zext_ln42_reg_556) ? 1'b1 : 1'b0);

assign icmp_ln1031_fu_267_p2 = ((ret_V_fu_261_p2 < zext_ln42_reg_556) ? 1'b1 : 1'b0);

assign icmp_ln1035_1_fu_442_p2 = ((ret_V_3_fu_434_p3 > zext_ln42_reg_556) ? 1'b1 : 1'b0);

assign icmp_ln1035_fu_317_p2 = ((ret_V_1_fu_309_p3 > zext_ln42_reg_556) ? 1'b1 : 1'b0);

assign icmp_ln13_1_fu_366_p2 = ((i_3_reg_150 == 5'd16) ? 1'b1 : 1'b0);

assign icmp_ln13_fu_241_p2 = ((i_1_reg_99 == 5'd16) ? 1'b1 : 1'b0);

assign icmp_ln42_fu_225_p2 = ((i_fu_44 == 5'd16) ? 1'b1 : 1'b0);

assign m_V_fu_426_p3 = ((trunc_ln13_1_fu_408_p1[0:0] == 1'b1) ? select_ln1031_1_fu_418_p3 : empty_18_reg_129);

assign r_V_1_fu_466_p4 = {{empty_19_reg_141[15:1]}};

assign r_V_2_fu_486_p4 = {{conv3_i3_fu_48[15:1]}};

assign r_V_fu_341_p4 = {{empty_16_reg_90[15:1]}};

assign ret_V_1_fu_309_p3 = {{t_V_reg_110}, {1'd0}};

assign ret_V_2_fu_386_p2 = (zext_ln1495_3_fu_382_p1 + zext_ln1495_2_fu_378_p1);

assign ret_V_3_fu_434_p3 = {{t_V_5_reg_161}, {1'd0}};

assign ret_V_fu_261_p2 = (zext_ln1495_1_fu_257_p1 + zext_ln1495_fu_253_p1);

assign select_ln1031_1_fu_418_p3 = ((and_ln1031_1_fu_412_p2[0:0] == 1'b1) ? add_ln186_1_fu_397_p2 : sub_ln186_2_fu_403_p2);

assign select_ln1031_fu_293_p3 = ((and_ln1031_fu_287_p2[0:0] == 1'b1) ? add_ln186_fu_272_p2 : sub_ln186_fu_278_p2);

assign select_ln13_fu_301_p3 = ((trunc_ln13_fu_283_p1[0:0] == 1'b1) ? select_ln1031_fu_293_p3 : empty_15_reg_78);

assign sub_ln186_2_fu_403_p2 = (add_ln186_1_fu_397_p2 - N);

assign sub_ln186_fu_278_p2 = (add_ln186_fu_272_p2 - N);

assign t_V_10_fu_333_p3 = ((icmp_ln1035_fu_317_p2[0:0] == 1'b1) ? t_V_7_fu_328_p2 : t_V_6_fu_322_p2);

assign t_V_12_fu_447_p2 = t_V_5_reg_161 << 16'd1;

assign t_V_13_fu_453_p2 = (t_V_12_fu_447_p2 - N);

assign t_V_14_fu_458_p3 = ((icmp_ln1035_1_fu_442_p2[0:0] == 1'b1) ? t_V_13_fu_453_p2 : t_V_12_fu_447_p2);

assign t_V_6_fu_322_p2 = t_V_reg_110 << 16'd1;

assign t_V_7_fu_328_p2 = (t_V_6_fu_322_p2 - N);

assign trunc_ln11_fu_237_p1 = conv3_i3_fu_48[0:0];

assign trunc_ln13_1_fu_408_p1 = empty_19_reg_141[0:0];

assign trunc_ln13_fu_283_p1 = empty_16_reg_90[0:0];

assign zext_ln1495_1_fu_257_p1 = t_V_reg_110;

assign zext_ln1495_2_fu_378_p1 = empty_18_reg_129;

assign zext_ln1495_3_fu_382_p1 = t_V_5_reg_161;

assign zext_ln1495_fu_253_p1 = empty_15_reg_78;

assign zext_ln1669_1_fu_476_p1 = r_V_1_fu_466_p4;

assign zext_ln1669_2_fu_496_p1 = r_V_2_fu_486_p4;

assign zext_ln1669_fu_351_p1 = r_V_fu_341_p4;

assign zext_ln42_fu_195_p1 = N;

always @ (posedge ap_clk) begin
    zext_ln42_reg_556[16] <= 1'b0;
end

endmodule //rsa_mod_exp
