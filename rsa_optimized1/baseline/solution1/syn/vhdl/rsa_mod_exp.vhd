-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
-- Version: 2022.2
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity rsa_mod_exp is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    y : IN STD_LOGIC_VECTOR (15 downto 0);
    d : IN STD_LOGIC_VECTOR (15 downto 0);
    N : IN STD_LOGIC_VECTOR (15 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of rsa_mod_exp is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (5 downto 0) := "000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (5 downto 0) := "000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (5 downto 0) := "001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (5 downto 0) := "010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv16_1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv15_0 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000000";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal zext_ln42_fu_195_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal zext_ln42_reg_556 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_load_fu_189_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal icmp_ln42_fu_225_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln42_reg_573 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_8_fu_231_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_8_reg_577 : STD_LOGIC_VECTOR (4 downto 0);
    signal trunc_ln11_fu_237_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln11_reg_582 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_6_fu_247_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal select_ln13_fu_301_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln13_fu_241_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal t_V_10_fu_333_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln1669_fu_351_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal a_V_load_reg_613 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal i_7_fu_372_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal m_V_fu_426_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln13_1_fu_366_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal t_V_14_fu_458_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln1669_1_fu_476_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal empty_15_reg_78 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln1019_fu_355_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_16_reg_90 : STD_LOGIC_VECTOR (15 downto 0);
    signal i_1_reg_99 : STD_LOGIC_VECTOR (4 downto 0);
    signal t_V_reg_110 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_0_0_0274_ph_reg_119 : STD_LOGIC_VECTOR (15 downto 0);
    signal empty_18_reg_129 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln1019_1_fu_480_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_19_reg_141 : STD_LOGIC_VECTOR (15 downto 0);
    signal i_3_reg_150 : STD_LOGIC_VECTOR (4 downto 0);
    signal t_V_5_reg_161 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_lcssa1_reg_170 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_phi_mux_m_V_1_phi_fu_183_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal m_V_1_reg_180 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal icmp_ln1019_2_fu_500_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_fu_44 : STD_LOGIC_VECTOR (4 downto 0);
    signal conv3_i3_fu_48 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln1669_2_fu_496_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal t_V_1_fu_52 : STD_LOGIC_VECTOR (15 downto 0);
    signal a_V_fu_56 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_sig_allocacmp_a_V_load : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln1495_1_fu_257_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal zext_ln1495_fu_253_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal ret_V_fu_261_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln186_fu_272_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln13_fu_283_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1031_fu_267_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln1031_fu_287_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln186_fu_278_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln1031_fu_293_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal ret_V_1_fu_309_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal t_V_6_fu_322_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln1035_fu_317_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal t_V_7_fu_328_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal r_V_fu_341_p4 : STD_LOGIC_VECTOR (14 downto 0);
    signal zext_ln1495_3_fu_382_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal zext_ln1495_2_fu_378_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal ret_V_2_fu_386_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln186_1_fu_397_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln13_1_fu_408_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1031_1_fu_392_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln1031_1_fu_412_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln186_2_fu_403_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln1031_1_fu_418_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal ret_V_3_fu_434_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal t_V_12_fu_447_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln1035_1_fu_442_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal t_V_13_fu_453_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal r_V_1_fu_466_p4 : STD_LOGIC_VECTOR (14 downto 0);
    signal r_V_2_fu_486_p4 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_return_preg : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_return_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_preg <= ap_const_lv16_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state6) and ((icmp_ln42_reg_573 = ap_const_lv1_1) or (icmp_ln1019_2_fu_500_p2 = ap_const_lv1_1)))) then 
                    ap_return_preg <= ap_phi_mux_m_V_1_phi_fu_183_p4;
                end if; 
            end if;
        end if;
    end process;


    a_V_fu_56_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                a_V_fu_56 <= ap_const_lv16_1;
            elsif (((trunc_ln11_reg_582 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                a_V_fu_56 <= p_0_0_0274_ph_reg_119;
            end if; 
        end if;
    end process;

    conv3_i3_fu_48_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                conv3_i3_fu_48 <= d;
            elsif (((icmp_ln42_reg_573 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln1019_2_fu_500_p2 = ap_const_lv1_0))) then 
                conv3_i3_fu_48 <= zext_ln1669_2_fu_496_p1;
            end if; 
        end if;
    end process;

    empty_15_reg_78_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((trunc_ln11_fu_237_p1 = ap_const_lv1_1) and (icmp_ln42_fu_225_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                empty_15_reg_78 <= ap_const_lv16_0;
            elsif (((icmp_ln1019_fu_355_p2 = ap_const_lv1_0) and (icmp_ln13_fu_241_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                empty_15_reg_78 <= select_ln13_fu_301_p3;
            end if; 
        end if;
    end process;

    empty_16_reg_90_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((trunc_ln11_fu_237_p1 = ap_const_lv1_1) and (icmp_ln42_fu_225_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                empty_16_reg_90 <= grp_load_fu_189_p1;
            elsif (((icmp_ln1019_fu_355_p2 = ap_const_lv1_0) and (icmp_ln13_fu_241_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                empty_16_reg_90 <= zext_ln1669_fu_351_p1;
            end if; 
        end if;
    end process;

    empty_18_reg_129_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln13_1_fu_366_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln1019_1_fu_480_p2 = ap_const_lv1_0))) then 
                empty_18_reg_129 <= m_V_fu_426_p3;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                empty_18_reg_129 <= ap_const_lv16_0;
            end if; 
        end if;
    end process;

    empty_19_reg_141_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln13_1_fu_366_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln1019_1_fu_480_p2 = ap_const_lv1_0))) then 
                empty_19_reg_141 <= zext_ln1669_1_fu_476_p1;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                empty_19_reg_141 <= t_V_1_fu_52;
            end if; 
        end if;
    end process;

    i_1_reg_99_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((trunc_ln11_fu_237_p1 = ap_const_lv1_1) and (icmp_ln42_fu_225_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                i_1_reg_99 <= ap_const_lv5_0;
            elsif (((icmp_ln1019_fu_355_p2 = ap_const_lv1_0) and (icmp_ln13_fu_241_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                i_1_reg_99 <= i_6_fu_247_p2;
            end if; 
        end if;
    end process;

    i_3_reg_150_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln13_1_fu_366_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln1019_1_fu_480_p2 = ap_const_lv1_0))) then 
                i_3_reg_150 <= i_7_fu_372_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                i_3_reg_150 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    i_fu_44_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                i_fu_44 <= ap_const_lv5_0;
            elsif (((icmp_ln42_reg_573 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln1019_2_fu_500_p2 = ap_const_lv1_0))) then 
                i_fu_44 <= i_8_reg_577;
            end if; 
        end if;
    end process;

    m_V_1_reg_180_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln42_reg_573 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln1019_2_fu_500_p2 = ap_const_lv1_1))) then 
                m_V_1_reg_180 <= a_V_load_reg_613;
            elsif (((icmp_ln42_fu_225_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                m_V_1_reg_180 <= grp_load_fu_189_p1;
            end if; 
        end if;
    end process;

    p_0_0_0274_ph_reg_119_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                if (((icmp_ln1019_fu_355_p2 = ap_const_lv1_1) and (icmp_ln13_fu_241_p2 = ap_const_lv1_0))) then 
                    p_0_0_0274_ph_reg_119 <= select_ln13_fu_301_p3;
                elsif ((icmp_ln13_fu_241_p2 = ap_const_lv1_1)) then 
                    p_0_0_0274_ph_reg_119 <= empty_15_reg_78;
                end if;
            end if; 
        end if;
    end process;

    p_lcssa1_reg_170_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                if (((icmp_ln13_1_fu_366_p2 = ap_const_lv1_0) and (icmp_ln1019_1_fu_480_p2 = ap_const_lv1_1))) then 
                    p_lcssa1_reg_170 <= m_V_fu_426_p3;
                elsif ((icmp_ln13_1_fu_366_p2 = ap_const_lv1_1)) then 
                    p_lcssa1_reg_170 <= empty_18_reg_129;
                end if;
            end if; 
        end if;
    end process;

    t_V_1_fu_52_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                t_V_1_fu_52 <= y;
            elsif (((icmp_ln42_reg_573 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln1019_2_fu_500_p2 = ap_const_lv1_0))) then 
                t_V_1_fu_52 <= p_lcssa1_reg_170;
            end if; 
        end if;
    end process;

    t_V_5_reg_161_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln13_1_fu_366_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln1019_1_fu_480_p2 = ap_const_lv1_0))) then 
                t_V_5_reg_161 <= t_V_14_fu_458_p3;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                t_V_5_reg_161 <= t_V_1_fu_52;
            end if; 
        end if;
    end process;

    t_V_reg_110_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((trunc_ln11_fu_237_p1 = ap_const_lv1_1) and (icmp_ln42_fu_225_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                t_V_reg_110 <= t_V_1_fu_52;
            elsif (((icmp_ln1019_fu_355_p2 = ap_const_lv1_0) and (icmp_ln13_fu_241_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                t_V_reg_110 <= t_V_10_fu_333_p3;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                a_V_load_reg_613 <= grp_load_fu_189_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_8_reg_577 <= i_8_fu_231_p2;
                icmp_ln42_reg_573 <= icmp_ln42_fu_225_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln42_fu_225_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                trunc_ln11_reg_582 <= trunc_ln11_fu_237_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                    zext_ln42_reg_556(15 downto 0) <= zext_ln42_fu_195_p1(15 downto 0);
            end if;
        end if;
    end process;
    zext_ln42_reg_556(16) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln42_fu_225_p2, icmp_ln42_reg_573, trunc_ln11_fu_237_p1, ap_CS_fsm_state3, icmp_ln13_fu_241_p2, ap_CS_fsm_state5, icmp_ln13_1_fu_366_p2, icmp_ln1019_fu_355_p2, icmp_ln1019_1_fu_480_p2, ap_CS_fsm_state6, icmp_ln1019_2_fu_500_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((trunc_ln11_fu_237_p1 = ap_const_lv1_1) and (icmp_ln42_fu_225_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                elsif (((trunc_ln11_fu_237_p1 = ap_const_lv1_0) and (icmp_ln42_fu_225_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state3 => 
                if (((icmp_ln1019_fu_355_p2 = ap_const_lv1_0) and (icmp_ln13_fu_241_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                if (((icmp_ln13_1_fu_366_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln1019_1_fu_480_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state6 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state6) and ((icmp_ln42_reg_573 = ap_const_lv1_1) or (icmp_ln1019_2_fu_500_p2 = ap_const_lv1_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXX";
        end case;
    end process;
    add_ln186_1_fu_397_p2 <= std_logic_vector(unsigned(t_V_5_reg_161) + unsigned(empty_18_reg_129));
    add_ln186_fu_272_p2 <= std_logic_vector(unsigned(t_V_reg_110) + unsigned(empty_15_reg_78));
    and_ln1031_1_fu_412_p2 <= (trunc_ln13_1_fu_408_p1 and icmp_ln1031_1_fu_392_p2);
    and_ln1031_fu_287_p2 <= (trunc_ln13_fu_283_p1 and icmp_ln1031_fu_267_p2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state2_blk <= ap_const_logic_0;
    ap_ST_fsm_state3_blk <= ap_const_logic_0;
    ap_ST_fsm_state4_blk <= ap_const_logic_0;
    ap_ST_fsm_state5_blk <= ap_const_logic_0;
    ap_ST_fsm_state6_blk <= ap_const_logic_0;

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, icmp_ln42_reg_573, ap_CS_fsm_state6, icmp_ln1019_2_fu_500_p2)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0)) or ((ap_const_logic_1 = ap_CS_fsm_state6) and ((icmp_ln42_reg_573 = ap_const_lv1_1) or (icmp_ln1019_2_fu_500_p2 = ap_const_lv1_1))))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_m_V_1_phi_fu_183_p4_assign_proc : process(icmp_ln42_reg_573, a_V_load_reg_613, m_V_1_reg_180, ap_CS_fsm_state6, icmp_ln1019_2_fu_500_p2)
    begin
        if (((icmp_ln42_reg_573 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln1019_2_fu_500_p2 = ap_const_lv1_1))) then 
            ap_phi_mux_m_V_1_phi_fu_183_p4 <= a_V_load_reg_613;
        else 
            ap_phi_mux_m_V_1_phi_fu_183_p4 <= m_V_1_reg_180;
        end if; 
    end process;


    ap_ready_assign_proc : process(icmp_ln42_reg_573, ap_CS_fsm_state6, icmp_ln1019_2_fu_500_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) and ((icmp_ln42_reg_573 = ap_const_lv1_1) or (icmp_ln1019_2_fu_500_p2 = ap_const_lv1_1)))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_return_assign_proc : process(icmp_ln42_reg_573, ap_phi_mux_m_V_1_phi_fu_183_p4, ap_CS_fsm_state6, icmp_ln1019_2_fu_500_p2, ap_return_preg)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) and ((icmp_ln42_reg_573 = ap_const_lv1_1) or (icmp_ln1019_2_fu_500_p2 = ap_const_lv1_1)))) then 
            ap_return <= ap_phi_mux_m_V_1_phi_fu_183_p4;
        else 
            ap_return <= ap_return_preg;
        end if; 
    end process;


    ap_sig_allocacmp_a_V_load_assign_proc : process(trunc_ln11_reg_582, ap_CS_fsm_state4, p_0_0_0274_ph_reg_119, a_V_fu_56)
    begin
        if (((trunc_ln11_reg_582 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            ap_sig_allocacmp_a_V_load <= p_0_0_0274_ph_reg_119;
        else 
            ap_sig_allocacmp_a_V_load <= a_V_fu_56;
        end if; 
    end process;


    grp_load_fu_189_p1_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state4, a_V_fu_56, ap_sig_allocacmp_a_V_load)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            grp_load_fu_189_p1 <= ap_sig_allocacmp_a_V_load;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            grp_load_fu_189_p1 <= a_V_fu_56;
        else 
            grp_load_fu_189_p1 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;

    i_6_fu_247_p2 <= std_logic_vector(unsigned(i_1_reg_99) + unsigned(ap_const_lv5_1));
    i_7_fu_372_p2 <= std_logic_vector(unsigned(i_3_reg_150) + unsigned(ap_const_lv5_1));
    i_8_fu_231_p2 <= std_logic_vector(unsigned(i_fu_44) + unsigned(ap_const_lv5_1));
    icmp_ln1019_1_fu_480_p2 <= "1" when (r_V_1_fu_466_p4 = ap_const_lv15_0) else "0";
    icmp_ln1019_2_fu_500_p2 <= "1" when (r_V_2_fu_486_p4 = ap_const_lv15_0) else "0";
    icmp_ln1019_fu_355_p2 <= "1" when (r_V_fu_341_p4 = ap_const_lv15_0) else "0";
    icmp_ln1031_1_fu_392_p2 <= "1" when (unsigned(ret_V_2_fu_386_p2) < unsigned(zext_ln42_reg_556)) else "0";
    icmp_ln1031_fu_267_p2 <= "1" when (unsigned(ret_V_fu_261_p2) < unsigned(zext_ln42_reg_556)) else "0";
    icmp_ln1035_1_fu_442_p2 <= "1" when (unsigned(ret_V_3_fu_434_p3) > unsigned(zext_ln42_reg_556)) else "0";
    icmp_ln1035_fu_317_p2 <= "1" when (unsigned(ret_V_1_fu_309_p3) > unsigned(zext_ln42_reg_556)) else "0";
    icmp_ln13_1_fu_366_p2 <= "1" when (i_3_reg_150 = ap_const_lv5_10) else "0";
    icmp_ln13_fu_241_p2 <= "1" when (i_1_reg_99 = ap_const_lv5_10) else "0";
    icmp_ln42_fu_225_p2 <= "1" when (i_fu_44 = ap_const_lv5_10) else "0";
    m_V_fu_426_p3 <= 
        select_ln1031_1_fu_418_p3 when (trunc_ln13_1_fu_408_p1(0) = '1') else 
        empty_18_reg_129;
    r_V_1_fu_466_p4 <= empty_19_reg_141(15 downto 1);
    r_V_2_fu_486_p4 <= conv3_i3_fu_48(15 downto 1);
    r_V_fu_341_p4 <= empty_16_reg_90(15 downto 1);
    ret_V_1_fu_309_p3 <= (t_V_reg_110 & ap_const_lv1_0);
    ret_V_2_fu_386_p2 <= std_logic_vector(unsigned(zext_ln1495_3_fu_382_p1) + unsigned(zext_ln1495_2_fu_378_p1));
    ret_V_3_fu_434_p3 <= (t_V_5_reg_161 & ap_const_lv1_0);
    ret_V_fu_261_p2 <= std_logic_vector(unsigned(zext_ln1495_1_fu_257_p1) + unsigned(zext_ln1495_fu_253_p1));
    select_ln1031_1_fu_418_p3 <= 
        add_ln186_1_fu_397_p2 when (and_ln1031_1_fu_412_p2(0) = '1') else 
        sub_ln186_2_fu_403_p2;
    select_ln1031_fu_293_p3 <= 
        add_ln186_fu_272_p2 when (and_ln1031_fu_287_p2(0) = '1') else 
        sub_ln186_fu_278_p2;
    select_ln13_fu_301_p3 <= 
        select_ln1031_fu_293_p3 when (trunc_ln13_fu_283_p1(0) = '1') else 
        empty_15_reg_78;
    sub_ln186_2_fu_403_p2 <= std_logic_vector(unsigned(add_ln186_1_fu_397_p2) - unsigned(N));
    sub_ln186_fu_278_p2 <= std_logic_vector(unsigned(add_ln186_fu_272_p2) - unsigned(N));
    t_V_10_fu_333_p3 <= 
        t_V_7_fu_328_p2 when (icmp_ln1035_fu_317_p2(0) = '1') else 
        t_V_6_fu_322_p2;
    t_V_12_fu_447_p2 <= std_logic_vector(shift_left(unsigned(t_V_5_reg_161),to_integer(unsigned('0' & ap_const_lv16_1(16-1 downto 0)))));
    t_V_13_fu_453_p2 <= std_logic_vector(unsigned(t_V_12_fu_447_p2) - unsigned(N));
    t_V_14_fu_458_p3 <= 
        t_V_13_fu_453_p2 when (icmp_ln1035_1_fu_442_p2(0) = '1') else 
        t_V_12_fu_447_p2;
    t_V_6_fu_322_p2 <= std_logic_vector(shift_left(unsigned(t_V_reg_110),to_integer(unsigned('0' & ap_const_lv16_1(16-1 downto 0)))));
    t_V_7_fu_328_p2 <= std_logic_vector(unsigned(t_V_6_fu_322_p2) - unsigned(N));
    trunc_ln11_fu_237_p1 <= conv3_i3_fu_48(1 - 1 downto 0);
    trunc_ln13_1_fu_408_p1 <= empty_19_reg_141(1 - 1 downto 0);
    trunc_ln13_fu_283_p1 <= empty_16_reg_90(1 - 1 downto 0);
    zext_ln1495_1_fu_257_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(t_V_reg_110),17));
    zext_ln1495_2_fu_378_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_18_reg_129),17));
    zext_ln1495_3_fu_382_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(t_V_5_reg_161),17));
    zext_ln1495_fu_253_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_15_reg_78),17));
    zext_ln1669_1_fu_476_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(r_V_1_fu_466_p4),16));
    zext_ln1669_2_fu_496_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(r_V_2_fu_486_p4),16));
    zext_ln1669_fu_351_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(r_V_fu_341_p4),16));
    zext_ln42_fu_195_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(N),17));
end behav;
