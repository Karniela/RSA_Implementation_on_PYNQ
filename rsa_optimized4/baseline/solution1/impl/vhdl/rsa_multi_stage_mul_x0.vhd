-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
-- Version: 2022.2
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity rsa_multi_stage_mul_x0 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    a : IN STD_LOGIC_VECTOR (127 downto 0);
    b : IN STD_LOGIC_VECTOR (128 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (128 downto 0) );
end;


architecture behav of rsa_multi_stage_mul_x0 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv129_lc_1 : STD_LOGIC_VECTOR (128 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv8_81 : STD_LOGIC_VECTOR (7 downto 0) := "10000001";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln60_fu_106_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal temp_V_multi_stage_mul_x0_add_m_fu_64_ap_ready : STD_LOGIC;
    signal temp_V_multi_stage_mul_x0_add_m_fu_64_a : STD_LOGIC_VECTOR (0 downto 0);
    signal temp_V_multi_stage_mul_x0_add_m_fu_64_ap_return : STD_LOGIC_VECTOR (128 downto 0);
    signal call_ret5_multi_stage_mul_x0_update_m_t_a_fu_71_ap_ready : STD_LOGIC;
    signal call_ret5_multi_stage_mul_x0_update_m_t_a_fu_71_t_V_read : STD_LOGIC_VECTOR (127 downto 0);
    signal call_ret5_multi_stage_mul_x0_update_m_t_a_fu_71_ap_return_0 : STD_LOGIC_VECTOR (128 downto 0);
    signal call_ret5_multi_stage_mul_x0_update_m_t_a_fu_71_ap_return_1 : STD_LOGIC_VECTOR (128 downto 0);
    signal call_ret5_multi_stage_mul_x0_update_m_t_a_fu_71_ap_return_2 : STD_LOGIC_VECTOR (128 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal i_01_fu_36 : STD_LOGIC_VECTOR (7 downto 0);
    signal i_3_fu_112_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal ap_sig_allocacmp_i : STD_LOGIC_VECTOR (7 downto 0);
    signal m_V_4_fu_40 : STD_LOGIC_VECTOR (128 downto 0);
    signal ap_sig_allocacmp_m_V_4_load : STD_LOGIC_VECTOR (128 downto 0);
    signal a_buf_0_fu_44 : STD_LOGIC_VECTOR (128 downto 0);
    signal a_cast_fu_79_p1 : STD_LOGIC_VECTOR (128 downto 0);
    signal t_V_4_fu_48 : STD_LOGIC_VECTOR (128 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component rsa_multi_stage_mul_x0_add_m IS
    port (
        ap_ready : OUT STD_LOGIC;
        a : IN STD_LOGIC_VECTOR (0 downto 0);
        m : IN STD_LOGIC_VECTOR (128 downto 0);
        t : IN STD_LOGIC_VECTOR (128 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (128 downto 0) );
    end component;


    component rsa_multi_stage_mul_x0_update_m_t_a IS
    port (
        ap_ready : OUT STD_LOGIC;
        m_V_write : IN STD_LOGIC_VECTOR (128 downto 0);
        t_V_read : IN STD_LOGIC_VECTOR (127 downto 0);
        a_V_read : IN STD_LOGIC_VECTOR (128 downto 0);
        ap_return_0 : OUT STD_LOGIC_VECTOR (128 downto 0);
        ap_return_1 : OUT STD_LOGIC_VECTOR (128 downto 0);
        ap_return_2 : OUT STD_LOGIC_VECTOR (128 downto 0) );
    end component;


    component rsa_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    temp_V_multi_stage_mul_x0_add_m_fu_64 : component rsa_multi_stage_mul_x0_add_m
    port map (
        ap_ready => temp_V_multi_stage_mul_x0_add_m_fu_64_ap_ready,
        a => temp_V_multi_stage_mul_x0_add_m_fu_64_a,
        m => m_V_4_fu_40,
        t => t_V_4_fu_48,
        ap_return => temp_V_multi_stage_mul_x0_add_m_fu_64_ap_return);

    call_ret5_multi_stage_mul_x0_update_m_t_a_fu_71 : component rsa_multi_stage_mul_x0_update_m_t_a
    port map (
        ap_ready => call_ret5_multi_stage_mul_x0_update_m_t_a_fu_71_ap_ready,
        m_V_write => temp_V_multi_stage_mul_x0_add_m_fu_64_ap_return,
        t_V_read => call_ret5_multi_stage_mul_x0_update_m_t_a_fu_71_t_V_read,
        a_V_read => a_buf_0_fu_44,
        ap_return_0 => call_ret5_multi_stage_mul_x0_update_m_t_a_fu_71_ap_return_0,
        ap_return_1 => call_ret5_multi_stage_mul_x0_update_m_t_a_fu_71_ap_return_1,
        ap_return_2 => call_ret5_multi_stage_mul_x0_update_m_t_a_fu_71_ap_return_2);

    flow_control_loop_pipe_sequential_init_U : component rsa_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    a_buf_0_fu_44_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    a_buf_0_fu_44 <= a_cast_fu_79_p1;
                elsif ((ap_enable_reg_pp0_iter1 = ap_const_logic_1)) then 
                    a_buf_0_fu_44 <= call_ret5_multi_stage_mul_x0_update_m_t_a_fu_71_ap_return_2;
                end if;
            end if; 
        end if;
    end process;

    i_01_fu_36_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln60_fu_106_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    i_01_fu_36 <= i_3_fu_112_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    i_01_fu_36 <= ap_const_lv8_0;
                end if;
            end if; 
        end if;
    end process;

    m_V_4_fu_40_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    m_V_4_fu_40 <= ap_const_lv129_lc_1;
                elsif ((ap_enable_reg_pp0_iter1 = ap_const_logic_1)) then 
                    m_V_4_fu_40 <= call_ret5_multi_stage_mul_x0_update_m_t_a_fu_71_ap_return_0;
                end if;
            end if; 
        end if;
    end process;

    t_V_4_fu_48_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    t_V_4_fu_48 <= b;
                elsif ((ap_enable_reg_pp0_iter1 = ap_const_logic_1)) then 
                    t_V_4_fu_48 <= call_ret5_multi_stage_mul_x0_update_m_t_a_fu_71_ap_return_1;
                end if;
            end if; 
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    a_cast_fu_79_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(a),129));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, icmp_ln60_fu_106_p2)
    begin
        if (((icmp_ln60_fu_106_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, ap_loop_exit_ready, ap_done_reg)
    begin
        if (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_start_int = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;

    ap_return <= ap_sig_allocacmp_m_V_4_load;

    ap_sig_allocacmp_i_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, i_01_fu_36, ap_loop_init)
    begin
        if (((ap_loop_init = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_i <= ap_const_lv8_0;
        else 
            ap_sig_allocacmp_i <= i_01_fu_36;
        end if; 
    end process;


    ap_sig_allocacmp_m_V_4_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, call_ret5_multi_stage_mul_x0_update_m_t_a_fu_71_ap_return_0, ap_block_pp0_stage0, ap_loop_init, m_V_4_fu_40)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
            if ((ap_loop_init = ap_const_logic_1)) then 
                ap_sig_allocacmp_m_V_4_load <= ap_const_lv129_lc_1;
            elsif ((ap_enable_reg_pp0_iter1 = ap_const_logic_1)) then 
                ap_sig_allocacmp_m_V_4_load <= call_ret5_multi_stage_mul_x0_update_m_t_a_fu_71_ap_return_0;
            else 
                ap_sig_allocacmp_m_V_4_load <= m_V_4_fu_40;
            end if;
        else 
            ap_sig_allocacmp_m_V_4_load <= m_V_4_fu_40;
        end if; 
    end process;

    call_ret5_multi_stage_mul_x0_update_m_t_a_fu_71_t_V_read <= t_V_4_fu_48(128 - 1 downto 0);
    i_3_fu_112_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_i) + unsigned(ap_const_lv8_1));
    icmp_ln60_fu_106_p2 <= "1" when (ap_sig_allocacmp_i = ap_const_lv8_81) else "0";
    temp_V_multi_stage_mul_x0_add_m_fu_64_a <= a_buf_0_fu_44(1 - 1 downto 0);
end behav;
