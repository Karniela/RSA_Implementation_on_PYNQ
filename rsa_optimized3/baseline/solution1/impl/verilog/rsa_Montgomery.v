// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
// Version: 2022.2
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module rsa_Montgomery (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        N,
        a,
        b,
        ap_return
);

parameter    ap_ST_fsm_state1 = 5'd1;
parameter    ap_ST_fsm_state2 = 5'd2;
parameter    ap_ST_fsm_state3 = 5'd4;
parameter    ap_ST_fsm_state4 = 5'd8;
parameter    ap_ST_fsm_state5 = 5'd16;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [255:0] N;
input  [255:0] a;
input  [255:0] b;
output  [255:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[255:0] ap_return;

(* fsm_encoding = "none" *) reg   [4:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [0:0] empty_fu_47_p1;
reg   [0:0] empty_reg_112;
wire   [256:0] zext_ln1495_fu_51_p1;
reg   [256:0] zext_ln1495_reg_117;
wire    ap_CS_fsm_state2;
wire   [256:0] grp_fu_59_p2;
reg   [256:0] add_ln186_reg_133;
wire   [0:0] icmp_ln1031_fu_69_p2;
reg   [0:0] icmp_ln1031_reg_138;
wire    ap_CS_fsm_state4;
wire   [255:0] trunc_ln186_fu_74_p1;
reg   [255:0] trunc_ln186_reg_143;
wire    grp_Montgomery_Pipeline_Montgomery_fu_36_ap_start;
wire    grp_Montgomery_Pipeline_Montgomery_fu_36_ap_done;
wire    grp_Montgomery_Pipeline_Montgomery_fu_36_ap_idle;
wire    grp_Montgomery_Pipeline_Montgomery_fu_36_ap_ready;
wire   [256:0] grp_Montgomery_Pipeline_Montgomery_fu_36_m_V_out;
wire    grp_Montgomery_Pipeline_Montgomery_fu_36_m_V_out_ap_vld;
reg    grp_Montgomery_Pipeline_Montgomery_fu_36_ap_start_reg;
wire    ap_CS_fsm_state3;
wire   [256:0] grp_fu_59_p0;
wire   [256:0] grp_fu_59_p1;
wire   [255:0] grp_fu_78_p0;
wire    ap_CS_fsm_state5;
wire   [0:0] xor_ln1031_fu_83_p2;
wire   [255:0] grp_fu_78_p2;
wire   [255:0] select_ln47_fu_88_p3;
reg   [255:0] ap_return_preg;
reg   [4:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
reg    ap_ST_fsm_state3_blk;
wire    ap_ST_fsm_state4_blk;
wire    ap_ST_fsm_state5_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 5'd1;
#0 grp_Montgomery_Pipeline_Montgomery_fu_36_ap_start_reg = 1'b0;
#0 ap_return_preg = 256'd0;
end

rsa_Montgomery_Pipeline_Montgomery grp_Montgomery_Pipeline_Montgomery_fu_36(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_Montgomery_Pipeline_Montgomery_fu_36_ap_start),
    .ap_done(grp_Montgomery_Pipeline_Montgomery_fu_36_ap_done),
    .ap_idle(grp_Montgomery_Pipeline_Montgomery_fu_36_ap_idle),
    .ap_ready(grp_Montgomery_Pipeline_Montgomery_fu_36_ap_ready),
    .a(a),
    .b_cast(empty_reg_112),
    .zext_ln1495(b),
    .zext_ln1495_1(N),
    .add_ln186(add_ln186_reg_133),
    .m_V_out(grp_Montgomery_Pipeline_Montgomery_fu_36_m_V_out),
    .m_V_out_ap_vld(grp_Montgomery_Pipeline_Montgomery_fu_36_m_V_out_ap_vld)
);

rsa_add_257ns_257ns_257_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 257 ),
    .din1_WIDTH( 257 ),
    .dout_WIDTH( 257 ))
add_257ns_257ns_257_2_1_U14(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_59_p0),
    .din1(grp_fu_59_p1),
    .ce(1'b1),
    .dout(grp_fu_59_p2)
);

rsa_sub_256ns_256ns_256_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 256 ),
    .din1_WIDTH( 256 ),
    .dout_WIDTH( 256 ))
sub_256ns_256ns_256_2_1_U15(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_78_p0),
    .din1(N),
    .ce(1'b1),
    .dout(grp_fu_78_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_preg <= 256'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state5)) begin
            ap_return_preg <= select_ln47_fu_88_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_Montgomery_Pipeline_Montgomery_fu_36_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state2)) begin
            grp_Montgomery_Pipeline_Montgomery_fu_36_ap_start_reg <= 1'b1;
        end else if ((grp_Montgomery_Pipeline_Montgomery_fu_36_ap_ready == 1'b1)) begin
            grp_Montgomery_Pipeline_Montgomery_fu_36_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        add_ln186_reg_133 <= grp_fu_59_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        empty_reg_112 <= empty_fu_47_p1;
        zext_ln1495_reg_117[255 : 0] <= zext_ln1495_fu_51_p1[255 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        icmp_ln1031_reg_138 <= icmp_ln1031_fu_69_p2;
        trunc_ln186_reg_143 <= trunc_ln186_fu_74_p1;
    end
end

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

always @ (*) begin
    if ((grp_Montgomery_Pipeline_Montgomery_fu_36_ap_done == 1'b0)) begin
        ap_ST_fsm_state3_blk = 1'b1;
    end else begin
        ap_ST_fsm_state3_blk = 1'b0;
    end
end

assign ap_ST_fsm_state4_blk = 1'b0;

assign ap_ST_fsm_state5_blk = 1'b0;

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | ((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        ap_return = select_ln47_fu_88_p3;
    end else begin
        ap_return = ap_return_preg;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            if (((grp_Montgomery_Pipeline_Montgomery_fu_36_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign empty_fu_47_p1 = b[0:0];

assign grp_Montgomery_Pipeline_Montgomery_fu_36_ap_start = grp_Montgomery_Pipeline_Montgomery_fu_36_ap_start_reg;

assign grp_fu_59_p0 = N;

assign grp_fu_59_p1 = b;

assign grp_fu_78_p0 = grp_Montgomery_Pipeline_Montgomery_fu_36_m_V_out[255:0];

assign icmp_ln1031_fu_69_p2 = ((grp_Montgomery_Pipeline_Montgomery_fu_36_m_V_out < zext_ln1495_reg_117) ? 1'b1 : 1'b0);

assign select_ln47_fu_88_p3 = ((xor_ln1031_fu_83_p2[0:0] == 1'b1) ? grp_fu_78_p2 : trunc_ln186_reg_143);

assign trunc_ln186_fu_74_p1 = grp_Montgomery_Pipeline_Montgomery_fu_36_m_V_out[255:0];

assign xor_ln1031_fu_83_p2 = (icmp_ln1031_reg_138 ^ 1'd1);

assign zext_ln1495_fu_51_p1 = N;

always @ (posedge ap_clk) begin
    zext_ln1495_reg_117[256] <= 1'b0;
end

endmodule //rsa_Montgomery
