-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
-- Version: 2022.2
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity rsa_mod_exp_Pipeline_VITIS_LOOP_12_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    exp : IN STD_LOGIC_VECTOR (255 downto 0);
    ret_V : IN STD_LOGIC_VECTOR (255 downto 0);
    agg_result_0_out : OUT STD_LOGIC_VECTOR (255 downto 0);
    agg_result_0_out_ap_vld : OUT STD_LOGIC;
    result_V_1_out : OUT STD_LOGIC_VECTOR (255 downto 0);
    result_V_1_out_ap_vld : OUT STD_LOGIC;
    ap_return : OUT STD_LOGIC_VECTOR (0 downto 0) );
end;


architecture behav of rsa_mod_exp_Pipeline_VITIS_LOOP_12_1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv256_lc_1 : STD_LOGIC_VECTOR (255 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv9_100 : STD_LOGIC_VECTOR (8 downto 0) := "100000000";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv32_FF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011111111";
    constant ap_const_lv255_lc_2 : STD_LOGIC_VECTOR (254 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal icmp_ln12_fu_158_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln12_reg_285 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal lhs_load_reg_289 : STD_LOGIC_VECTOR (255 downto 0);
    signal trunc_ln1497_fu_179_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln1497_reg_294 : STD_LOGIC_VECTOR (0 downto 0);
    signal ret_V_4_fu_183_p2 : STD_LOGIC_VECTOR (255 downto 0);
    signal ret_V_4_reg_300 : STD_LOGIC_VECTOR (255 downto 0);
    signal icmp_ln1019_fu_203_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1019_reg_306 : STD_LOGIC_VECTOR (0 downto 0);
    signal ret_V_3_fu_209_p2 : STD_LOGIC_VECTOR (255 downto 0);
    signal ret_V_3_reg_310 : STD_LOGIC_VECTOR (255 downto 0);
    signal result_V_load_1_reg_315 : STD_LOGIC_VECTOR (255 downto 0);
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal result_V_4_fu_225_p3 : STD_LOGIC_VECTOR (255 downto 0);
    signal result_V_4_reg_320 : STD_LOGIC_VECTOR (255 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_predicate_tran3to4_state2 : BOOLEAN;
    signal ap_condition_pp0_flush_enable : STD_LOGIC;
    signal ap_phi_mux_UnifiedRetVal_phi_fu_118_p4 : STD_LOGIC_VECTOR (0 downto 0);
    signal UnifiedRetVal_reg_114 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal rhs_fu_68 : STD_LOGIC_VECTOR (255 downto 0);
    signal ap_sig_allocacmp_rhs_load : STD_LOGIC_VECTOR (255 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal i_fu_72 : STD_LOGIC_VECTOR (8 downto 0);
    signal i_2_fu_164_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal lhs_fu_76 : STD_LOGIC_VECTOR (255 downto 0);
    signal result_V_5_fu_231_p3 : STD_LOGIC_VECTOR (255 downto 0);
    signal ap_sig_allocacmp_lhs_load : STD_LOGIC_VECTOR (255 downto 0);
    signal exp_buf_0_fu_80 : STD_LOGIC_VECTOR (255 downto 0);
    signal zext_ln1669_fu_199_p1 : STD_LOGIC_VECTOR (255 downto 0);
    signal result_V_fu_84 : STD_LOGIC_VECTOR (255 downto 0);
    signal r_V_fu_189_p4 : STD_LOGIC_VECTOR (254 downto 0);
    signal ap_return_preg : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_exit_tran_regpp0 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component rsa_mul_256s_256s_256_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (255 downto 0);
        din1 : IN STD_LOGIC_VECTOR (255 downto 0);
        dout : OUT STD_LOGIC_VECTOR (255 downto 0) );
    end component;



begin
    mul_256s_256s_256_1_1_U1 : component rsa_mul_256s_256s_256_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 256,
        din1_WIDTH => 256,
        dout_WIDTH => 256)
    port map (
        din0 => ap_sig_allocacmp_rhs_load,
        din1 => ap_sig_allocacmp_lhs_load,
        dout => ret_V_4_fu_183_p2);

    mul_256s_256s_256_1_1_U2 : component rsa_mul_256s_256s_256_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 256,
        din1_WIDTH => 256,
        dout_WIDTH => 256)
    port map (
        din0 => ap_sig_allocacmp_rhs_load,
        din1 => ap_sig_allocacmp_rhs_load,
        dout => ret_V_3_fu_209_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_pp0_flush_enable)) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_return_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_preg <= ap_const_lv1_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                    ap_return_preg <= ap_phi_mux_UnifiedRetVal_phi_fu_118_p4;
                end if; 
            end if;
        end if;
    end process;


    UnifiedRetVal_reg_114_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln12_reg_285 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                UnifiedRetVal_reg_114 <= ap_const_lv1_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                UnifiedRetVal_reg_114 <= ap_const_lv1_1;
            end if; 
        end if;
    end process;

    ap_exit_tran_regpp0_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then
                if ((icmp_ln12_fu_158_p2 = ap_const_lv1_1)) then 
                    ap_exit_tran_regpp0(0) <= '1';
                elsif ((ap_predicate_tran3to4_state2 = ap_const_boolean_1)) then 
                    ap_exit_tran_regpp0(0) <= '0';
                end if;
            end if; 
        end if;
    end process;

    exp_buf_0_fu_80_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                exp_buf_0_fu_80 <= exp;
            elsif (((icmp_ln1019_fu_203_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln12_fu_158_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                exp_buf_0_fu_80 <= zext_ln1669_fu_199_p1;
            end if; 
        end if;
    end process;

    i_fu_72_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_fu_72 <= ap_const_lv9_0;
            elsif (((icmp_ln1019_fu_203_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln12_fu_158_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                i_fu_72 <= i_2_fu_164_p2;
            end if; 
        end if;
    end process;

    lhs_fu_76_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                lhs_fu_76 <= ap_const_lv256_lc_1;
            elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln1019_reg_306 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln12_reg_285 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                lhs_fu_76 <= result_V_5_fu_231_p3;
            end if; 
        end if;
    end process;

    result_V_fu_84_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                result_V_fu_84 <= ap_const_lv256_lc_1;
            elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln1019_reg_306 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln12_reg_285 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                result_V_fu_84 <= result_V_4_fu_225_p3;
            end if; 
        end if;
    end process;

    rhs_fu_68_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                rhs_fu_68 <= ret_V;
            elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln1019_reg_306 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln12_reg_285 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                rhs_fu_68 <= ret_V_3_reg_310;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln12_fu_158_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln1019_reg_306 <= icmp_ln1019_fu_203_p2;
                lhs_load_reg_289 <= ap_sig_allocacmp_lhs_load;
                ret_V_4_reg_300 <= ret_V_4_fu_183_p2;
                trunc_ln1497_reg_294 <= trunc_ln1497_fu_179_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln12_reg_285 <= icmp_ln12_fu_158_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln12_reg_285 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                result_V_4_reg_320 <= result_V_4_fu_225_p3;
                result_V_load_1_reg_315 <= result_V_fu_84;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln1019_fu_203_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln12_fu_158_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ret_V_3_reg_310 <= ret_V_3_fu_209_p2;
            end if;
        end if;
    end process;
    ap_exit_tran_regpp0(1) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_subdone, ap_exit_tran_regpp0)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if (not(((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_exit_tran_regpp0 = ap_const_lv2_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_exit_tran_regpp0 = ap_const_lv2_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;

    agg_result_0_out_assign_proc : process(icmp_ln12_reg_285, result_V_load_1_reg_315, ap_CS_fsm_state5, ap_CS_fsm_state4, result_V_fu_84)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            agg_result_0_out <= result_V_fu_84;
        elsif (((icmp_ln12_reg_285 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            agg_result_0_out <= result_V_load_1_reg_315;
        else 
            agg_result_0_out <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    agg_result_0_out_ap_vld_assign_proc : process(icmp_ln12_reg_285, ap_CS_fsm_state5, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or ((icmp_ln12_reg_285 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4)))) then 
            agg_result_0_out_ap_vld <= ap_const_logic_1;
        else 
            agg_result_0_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state4 <= ap_CS_fsm(2);
    ap_CS_fsm_state5 <= ap_CS_fsm(3);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state4_blk <= ap_const_logic_0;
    ap_ST_fsm_state5_blk <= ap_const_logic_0;
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_flush_enable_assign_proc : process(icmp_ln12_fu_158_p2, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, ap_predicate_tran3to4_state2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and ((ap_predicate_tran3to4_state2 = ap_const_boolean_1) or (icmp_ln12_fu_158_p2 = ap_const_lv1_1)))) then 
            ap_condition_pp0_flush_enable <= ap_const_logic_1;
        else 
            ap_condition_pp0_flush_enable <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_UnifiedRetVal_phi_fu_118_p4_assign_proc : process(icmp_ln12_reg_285, UnifiedRetVal_reg_114, ap_CS_fsm_state4)
    begin
        if (((icmp_ln12_reg_285 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            ap_phi_mux_UnifiedRetVal_phi_fu_118_p4 <= ap_const_lv1_0;
        else 
            ap_phi_mux_UnifiedRetVal_phi_fu_118_p4 <= UnifiedRetVal_reg_114;
        end if; 
    end process;


    ap_predicate_tran3to4_state2_assign_proc : process(icmp_ln12_fu_158_p2, icmp_ln1019_fu_203_p2)
    begin
                ap_predicate_tran3to4_state2 <= ((icmp_ln1019_fu_203_p2 = ap_const_lv1_1) and (icmp_ln12_fu_158_p2 = ap_const_lv1_0));
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_return_assign_proc : process(ap_phi_mux_UnifiedRetVal_phi_fu_118_p4, ap_CS_fsm_state4, ap_return_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            ap_return <= ap_phi_mux_UnifiedRetVal_phi_fu_118_p4;
        else 
            ap_return <= ap_return_preg;
        end if; 
    end process;


    ap_sig_allocacmp_lhs_load_assign_proc : process(icmp_ln12_reg_285, ap_CS_fsm_pp0_stage0, icmp_ln1019_reg_306, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, lhs_fu_76, result_V_5_fu_231_p3)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln1019_reg_306 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (icmp_ln12_reg_285 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_lhs_load <= result_V_5_fu_231_p3;
        else 
            ap_sig_allocacmp_lhs_load <= lhs_fu_76;
        end if; 
    end process;


    ap_sig_allocacmp_rhs_load_assign_proc : process(icmp_ln12_reg_285, ap_CS_fsm_pp0_stage0, icmp_ln1019_reg_306, ret_V_3_reg_310, ap_enable_reg_pp0_iter1, rhs_fu_68, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln1019_reg_306 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (icmp_ln12_reg_285 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_rhs_load <= ret_V_3_reg_310;
        else 
            ap_sig_allocacmp_rhs_load <= rhs_fu_68;
        end if; 
    end process;

    i_2_fu_164_p2 <= std_logic_vector(unsigned(i_fu_72) + unsigned(ap_const_lv9_1));
    icmp_ln1019_fu_203_p2 <= "1" when (r_V_fu_189_p4 = ap_const_lv255_lc_2) else "0";
    icmp_ln12_fu_158_p2 <= "1" when (i_fu_72 = ap_const_lv9_100) else "0";
    r_V_fu_189_p4 <= exp_buf_0_fu_80(255 downto 1);
    result_V_1_out <= result_V_4_reg_320;

    result_V_1_out_ap_vld_assign_proc : process(icmp_ln12_reg_285, ap_CS_fsm_state4)
    begin
        if (((icmp_ln12_reg_285 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            result_V_1_out_ap_vld <= ap_const_logic_1;
        else 
            result_V_1_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    result_V_4_fu_225_p3 <= 
        ret_V_4_reg_300 when (trunc_ln1497_reg_294(0) = '1') else 
        result_V_fu_84;
    result_V_5_fu_231_p3 <= 
        ret_V_4_reg_300 when (trunc_ln1497_reg_294(0) = '1') else 
        lhs_load_reg_289;
    trunc_ln1497_fu_179_p1 <= exp_buf_0_fu_80(1 - 1 downto 0);
    zext_ln1669_fu_199_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(r_V_fu_189_p4),256));
end behav;
