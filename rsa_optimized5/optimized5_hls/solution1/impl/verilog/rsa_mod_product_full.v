// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
// Version: 2022.2
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module rsa_mod_product_full (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        a,
        b,
        N,
        ap_return
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_state2 = 4'd2;
parameter    ap_ST_fsm_state3 = 4'd4;
parameter    ap_ST_fsm_state4 = 4'd8;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [127:0] a;
input  [127:0] b;
input  [127:0] N;
output  [128:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;

(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [129:0] conv_i167_fu_77_p1;
reg   [129:0] conv_i167_reg_270;
wire   [128:0] zext_ln1496_fu_81_p1;
reg   [128:0] zext_ln1496_reg_276;
reg   [128:0] lhs_load_1_reg_285;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln175_fu_108_p2;
wire   [129:0] ret_V_fu_131_p2;
reg   [129:0] ret_V_reg_290;
wire   [128:0] m_V_fu_137_p2;
reg   [128:0] m_V_reg_295;
wire   [128:0] t_V_6_fu_167_p3;
reg   [128:0] t_V_6_reg_301;
wire   [128:0] m_V_5_fu_208_p3;
reg   [128:0] m_V_5_reg_306;
wire    ap_CS_fsm_state3;
reg   [128:0] lhs_fu_36;
wire    ap_CS_fsm_state4;
reg   [128:0] lhs_1_fu_40;
wire   [128:0] zext_ln186_fu_73_p1;
reg   [7:0] i_fu_44;
wire   [7:0] i_7_fu_114_p2;
reg   [127:0] shr_i4_fu_48;
wire   [127:0] zext_ln1669_fu_225_p1;
wire   [129:0] zext_ln186_5_fu_127_p1;
wire   [129:0] zext_ln186_4_fu_123_p1;
wire   [129:0] ret_V_6_fu_143_p3;
wire   [128:0] t_V_5_fu_156_p2;
wire   [0:0] icmp_ln1035_fu_151_p2;
wire   [128:0] t_V_fu_162_p2;
wire   [0:0] icmp_ln1031_fu_187_p2;
wire   [0:0] trunc_ln1497_fu_183_p1;
wire   [0:0] and_ln1031_fu_195_p2;
wire   [128:0] m_V_3_fu_191_p2;
wire   [128:0] m_V_4_fu_201_p3;
wire   [126:0] r_V_fu_215_p4;
reg   [3:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
wire    ap_ST_fsm_state4_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 4'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        i_fu_44 <= 8'd0;
    end else if (((icmp_ln175_fu_108_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        i_fu_44 <= i_7_fu_114_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        lhs_1_fu_40 <= zext_ln186_fu_73_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        lhs_1_fu_40 <= t_V_6_reg_301;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        lhs_fu_36 <= 129'd0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        lhs_fu_36 <= m_V_5_reg_306;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        shr_i4_fu_48 <= a;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        shr_i4_fu_48 <= zext_ln1669_fu_225_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        conv_i167_reg_270[127 : 0] <= conv_i167_fu_77_p1[127 : 0];
        zext_ln1496_reg_276[127 : 0] <= zext_ln1496_fu_81_p1[127 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln175_fu_108_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        lhs_load_1_reg_285 <= lhs_fu_36;
        m_V_reg_295 <= m_V_fu_137_p2;
        ret_V_reg_290 <= ret_V_fu_131_p2;
        t_V_6_reg_301 <= t_V_6_fu_167_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        m_V_5_reg_306 <= m_V_5_fu_208_p3;
    end
end

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

assign ap_ST_fsm_state3_blk = 1'b0;

assign ap_ST_fsm_state4_blk = 1'b0;

always @ (*) begin
    if ((((icmp_ln175_fu_108_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln175_fu_108_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln175_fu_108_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign and_ln1031_fu_195_p2 = (trunc_ln1497_fu_183_p1 & icmp_ln1031_fu_187_p2);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_return = lhs_fu_36;

assign conv_i167_fu_77_p1 = N;

assign i_7_fu_114_p2 = (i_fu_44 + 8'd1);

assign icmp_ln1031_fu_187_p2 = ((ret_V_reg_290 < conv_i167_reg_270) ? 1'b1 : 1'b0);

assign icmp_ln1035_fu_151_p2 = ((ret_V_6_fu_143_p3 > conv_i167_reg_270) ? 1'b1 : 1'b0);

assign icmp_ln175_fu_108_p2 = ((i_fu_44 == 8'd128) ? 1'b1 : 1'b0);

assign m_V_3_fu_191_p2 = (m_V_reg_295 - zext_ln1496_reg_276);

assign m_V_4_fu_201_p3 = ((and_ln1031_fu_195_p2[0:0] == 1'b1) ? m_V_reg_295 : m_V_3_fu_191_p2);

assign m_V_5_fu_208_p3 = ((trunc_ln1497_fu_183_p1[0:0] == 1'b1) ? m_V_4_fu_201_p3 : lhs_load_1_reg_285);

assign m_V_fu_137_p2 = (lhs_fu_36 + lhs_1_fu_40);

assign r_V_fu_215_p4 = {{shr_i4_fu_48[127:1]}};

assign ret_V_6_fu_143_p3 = {{lhs_1_fu_40}, {1'd0}};

assign ret_V_fu_131_p2 = (zext_ln186_5_fu_127_p1 + zext_ln186_4_fu_123_p1);

assign t_V_5_fu_156_p2 = lhs_1_fu_40 << 129'd1;

assign t_V_6_fu_167_p3 = ((icmp_ln1035_fu_151_p2[0:0] == 1'b1) ? t_V_fu_162_p2 : t_V_5_fu_156_p2);

assign t_V_fu_162_p2 = (t_V_5_fu_156_p2 - zext_ln1496_reg_276);

assign trunc_ln1497_fu_183_p1 = shr_i4_fu_48[0:0];

assign zext_ln1496_fu_81_p1 = N;

assign zext_ln1669_fu_225_p1 = r_V_fu_215_p4;

assign zext_ln186_4_fu_123_p1 = lhs_1_fu_40;

assign zext_ln186_5_fu_127_p1 = lhs_fu_36;

assign zext_ln186_fu_73_p1 = b;

always @ (posedge ap_clk) begin
    conv_i167_reg_270[129:128] <= 2'b00;
    zext_ln1496_reg_276[128] <= 1'b0;
end

endmodule //rsa_mod_product_full
