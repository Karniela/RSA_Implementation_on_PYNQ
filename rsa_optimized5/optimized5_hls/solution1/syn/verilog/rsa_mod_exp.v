// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
// Version: 2022.2
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module rsa_mod_exp (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        y,
        d,
        N,
        ap_return
);

parameter    ap_ST_fsm_state1 = 7'd1;
parameter    ap_ST_fsm_state2 = 7'd2;
parameter    ap_ST_fsm_state3 = 7'd4;
parameter    ap_ST_fsm_state4 = 7'd8;
parameter    ap_ST_fsm_state5 = 7'd16;
parameter    ap_ST_fsm_state6 = 7'd32;
parameter    ap_ST_fsm_state7 = 7'd64;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [127:0] y;
input  [127:0] d;
input  [127:0] N;
output  [127:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;

(* fsm_encoding = "none" *) reg   [6:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [127:0] reg_95;
wire    ap_CS_fsm_state3;
wire   [0:0] icmp_ln72_fu_124_p2;
wire   [0:0] trunc_ln1497_fu_136_p1;
wire    ap_CS_fsm_state5;
wire   [7:0] i_10_fu_130_p2;
reg   [7:0] i_10_reg_213;
reg   [0:0] trunc_ln1497_reg_218;
reg   [127:0] m_V_load_1_reg_222;
wire   [127:0] grp_Montgomery_fu_76_ap_return;
reg   [127:0] m_V_4_reg_227;
wire    ap_CS_fsm_state4;
reg   [127:0] ref_tmp5_reg_232;
wire    ap_CS_fsm_state6;
wire    grp_mod_product_mont_fu_68_ap_start;
wire    grp_mod_product_mont_fu_68_ap_done;
wire    grp_mod_product_mont_fu_68_ap_idle;
wire    grp_mod_product_mont_fu_68_ap_ready;
wire   [127:0] grp_mod_product_mont_fu_68_ap_return;
wire    grp_Montgomery_fu_76_ap_start;
wire    grp_Montgomery_fu_76_ap_done;
wire    grp_Montgomery_fu_76_ap_idle;
wire    grp_Montgomery_fu_76_ap_ready;
reg   [127:0] grp_Montgomery_fu_76_a;
reg    grp_mod_product_mont_fu_68_ap_start_reg;
wire    ap_CS_fsm_state2;
reg    grp_Montgomery_fu_76_ap_start_reg;
reg   [127:0] t_V_7_fu_34;
wire    ap_CS_fsm_state7;
reg   [7:0] i_04_fu_38;
reg   [127:0] empty_fu_42;
wire   [127:0] zext_ln1669_fu_158_p1;
reg   [127:0] m_V_fu_46;
wire   [126:0] r_V_fu_148_p4;
reg   [6:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
reg    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
reg    ap_ST_fsm_state4_blk;
wire    ap_ST_fsm_state5_blk;
reg    ap_ST_fsm_state6_blk;
wire    ap_ST_fsm_state7_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 7'd1;
#0 grp_mod_product_mont_fu_68_ap_start_reg = 1'b0;
#0 grp_Montgomery_fu_76_ap_start_reg = 1'b0;
end

rsa_mod_product_mont grp_mod_product_mont_fu_68(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_mod_product_mont_fu_68_ap_start),
    .ap_done(grp_mod_product_mont_fu_68_ap_done),
    .ap_idle(grp_mod_product_mont_fu_68_ap_idle),
    .ap_ready(grp_mod_product_mont_fu_68_ap_ready),
    .b(y),
    .N(N),
    .ap_return(grp_mod_product_mont_fu_68_ap_return)
);

rsa_Montgomery grp_Montgomery_fu_76(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_Montgomery_fu_76_ap_start),
    .ap_done(grp_Montgomery_fu_76_ap_done),
    .ap_idle(grp_Montgomery_fu_76_ap_idle),
    .ap_ready(grp_Montgomery_fu_76_ap_ready),
    .N(N),
    .a(grp_Montgomery_fu_76_a),
    .b(reg_95),
    .ap_return(grp_Montgomery_fu_76_ap_return)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_Montgomery_fu_76_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state5) | ((trunc_ln1497_fu_136_p1 == 1'd1) & (icmp_ln72_fu_124_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3)))) begin
            grp_Montgomery_fu_76_ap_start_reg <= 1'b1;
        end else if ((grp_Montgomery_fu_76_ap_ready == 1'b1)) begin
            grp_Montgomery_fu_76_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_mod_product_mont_fu_68_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            grp_mod_product_mont_fu_68_ap_start_reg <= 1'b1;
        end else if ((grp_mod_product_mont_fu_68_ap_ready == 1'b1)) begin
            grp_mod_product_mont_fu_68_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        empty_fu_42 <= d;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        empty_fu_42 <= zext_ln1669_fu_158_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_04_fu_38 <= 8'd0;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        i_04_fu_38 <= i_10_reg_213;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        m_V_fu_46 <= 128'd1;
    end else if (((trunc_ln1497_reg_218 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        m_V_fu_46 <= m_V_4_reg_227;
    end
end

always @ (posedge ap_clk) begin
    if (((grp_mod_product_mont_fu_68_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
        t_V_7_fu_34 <= grp_mod_product_mont_fu_68_ap_return;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        t_V_7_fu_34 <= ref_tmp5_reg_232;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        i_10_reg_213 <= i_10_fu_130_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        m_V_4_reg_227 <= grp_Montgomery_fu_76_ap_return;
    end
end

always @ (posedge ap_clk) begin
    if (((trunc_ln1497_fu_136_p1 == 1'd1) & (icmp_ln72_fu_124_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        m_V_load_1_reg_222 <= m_V_fu_46;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ref_tmp5_reg_232 <= grp_Montgomery_fu_76_ap_return;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) | ((trunc_ln1497_fu_136_p1 == 1'd1) & (icmp_ln72_fu_124_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3)))) begin
        reg_95 <= t_V_7_fu_34;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln72_fu_124_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        trunc_ln1497_reg_218 <= trunc_ln1497_fu_136_p1;
    end
end

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

always @ (*) begin
    if ((grp_mod_product_mont_fu_68_ap_done == 1'b0)) begin
        ap_ST_fsm_state2_blk = 1'b1;
    end else begin
        ap_ST_fsm_state2_blk = 1'b0;
    end
end

assign ap_ST_fsm_state3_blk = 1'b0;

always @ (*) begin
    if ((grp_Montgomery_fu_76_ap_done == 1'b0)) begin
        ap_ST_fsm_state4_blk = 1'b1;
    end else begin
        ap_ST_fsm_state4_blk = 1'b0;
    end
end

assign ap_ST_fsm_state5_blk = 1'b0;

always @ (*) begin
    if ((grp_Montgomery_fu_76_ap_done == 1'b0)) begin
        ap_ST_fsm_state6_blk = 1'b1;
    end else begin
        ap_ST_fsm_state6_blk = 1'b0;
    end
end

assign ap_ST_fsm_state7_blk = 1'b0;

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0)) | ((icmp_ln72_fu_124_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln72_fu_124_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        grp_Montgomery_fu_76_a = reg_95;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        grp_Montgomery_fu_76_a = m_V_load_1_reg_222;
    end else begin
        grp_Montgomery_fu_76_a = 'bx;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((grp_mod_product_mont_fu_68_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((icmp_ln72_fu_124_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else if (((trunc_ln1497_fu_136_p1 == 1'd0) & (icmp_ln72_fu_124_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((grp_Montgomery_fu_76_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            if (((grp_Montgomery_fu_76_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state6))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_return = m_V_fu_46;

assign grp_Montgomery_fu_76_ap_start = grp_Montgomery_fu_76_ap_start_reg;

assign grp_mod_product_mont_fu_68_ap_start = grp_mod_product_mont_fu_68_ap_start_reg;

assign i_10_fu_130_p2 = (i_04_fu_38 + 8'd1);

assign icmp_ln72_fu_124_p2 = ((i_04_fu_38 == 8'd128) ? 1'b1 : 1'b0);

assign r_V_fu_148_p4 = {{empty_fu_42[127:1]}};

assign trunc_ln1497_fu_136_p1 = empty_fu_42[0:0];

assign zext_ln1669_fu_158_p1 = r_V_fu_148_p4;

endmodule //rsa_mod_exp
