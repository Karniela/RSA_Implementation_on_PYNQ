// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
// Version: 2022.2
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module rsa_mont_update_m_temp (
        ap_clk,
        ap_rst,
        a,
        b,
        N,
        m,
        ap_return
);


input   ap_clk;
input   ap_rst;
input  [0:0] a;
input  [127:0] b;
input  [127:0] N;
input  [129:0] m;
output  [129:0] ap_return;

reg   [129:0] m_read_reg_130;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_11001;
wire   [128:0] add_ln186_fu_116_p2;
reg   [128:0] add_ln186_reg_135;
wire    ap_block_pp0_stage0;
wire   [0:0] trunc_ln1497_fu_42_p1;
wire   [0:0] trunc_ln1497_1_fu_54_p1;
wire   [0:0] and_ln18_fu_64_p2;
wire   [0:0] xor_ln18_fu_70_p2;
wire   [0:0] xor_ln901_fu_58_p2;
wire   [0:0] and_ln18_2_fu_82_p2;
wire   [0:0] and_ln18_1_fu_76_p2;
wire   [0:0] and_ln18_3_fu_88_p2;
wire   [0:0] or_ln18_fu_94_p2;
wire   [127:0] d1_V_fu_46_p3;
wire   [127:0] d2_V_fu_100_p3;
wire   [128:0] zext_ln186_fu_108_p1;
wire   [128:0] zext_ln186_1_fu_112_p1;
wire   [129:0] zext_ln186_2_fu_122_p1;
wire    ap_ce_reg;

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        add_ln186_reg_135 <= add_ln186_fu_116_p2;
        m_read_reg_130 <= m;
    end
end

assign add_ln186_fu_116_p2 = (zext_ln186_fu_108_p1 + zext_ln186_1_fu_112_p1);

assign and_ln18_1_fu_76_p2 = (xor_ln18_fu_70_p2 & trunc_ln1497_fu_42_p1);

assign and_ln18_2_fu_82_p2 = (xor_ln901_fu_58_p2 & a);

assign and_ln18_3_fu_88_p2 = (trunc_ln1497_1_fu_54_p1 & and_ln18_2_fu_82_p2);

assign and_ln18_fu_64_p2 = (trunc_ln1497_1_fu_54_p1 & a);

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_return = (zext_ln186_2_fu_122_p1 + m_read_reg_130);

assign d1_V_fu_46_p3 = ((a[0:0] == 1'b1) ? b : 128'd0);

assign d2_V_fu_100_p3 = ((or_ln18_fu_94_p2[0:0] == 1'b1) ? N : 128'd0);

assign or_ln18_fu_94_p2 = (and_ln18_3_fu_88_p2 | and_ln18_1_fu_76_p2);

assign trunc_ln1497_1_fu_54_p1 = b[0:0];

assign trunc_ln1497_fu_42_p1 = m[0:0];

assign xor_ln18_fu_70_p2 = (1'd1 ^ and_ln18_fu_64_p2);

assign xor_ln901_fu_58_p2 = (trunc_ln1497_fu_42_p1 ^ 1'd1);

assign zext_ln186_1_fu_112_p1 = d2_V_fu_100_p3;

assign zext_ln186_2_fu_122_p1 = add_ln186_reg_135;

assign zext_ln186_fu_108_p1 = d1_V_fu_46_p3;

endmodule //rsa_mont_update_m_temp
