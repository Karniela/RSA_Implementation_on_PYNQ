-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
-- Version: 2022.2
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity rsa_mod_product_mont is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    b : IN STD_LOGIC_VECTOR (127 downto 0);
    N : IN STD_LOGIC_VECTOR (127 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (127 downto 0) );
end;


architecture behav of rsa_mod_product_mont is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv8_80 : STD_LOGIC_VECTOR (7 downto 0) := "10000000";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv129_lc_2 : STD_LOGIC_VECTOR (128 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal conv_i_fu_55_p1 : STD_LOGIC_VECTOR (129 downto 0);
    signal conv_i_reg_147 : STD_LOGIC_VECTOR (129 downto 0);
    signal zext_ln186_fu_59_p1 : STD_LOGIC_VECTOR (128 downto 0);
    signal zext_ln186_reg_152 : STD_LOGIC_VECTOR (128 downto 0);
    signal t_V_4_fu_112_p3 : STD_LOGIC_VECTOR (128 downto 0);
    signal t_V_4_reg_160 : STD_LOGIC_VECTOR (128 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal icmp_ln51_fu_76_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal rhs_fu_28 : STD_LOGIC_VECTOR (128 downto 0);
    signal zext_ln186_3_fu_51_p1 : STD_LOGIC_VECTOR (128 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal i_fu_32 : STD_LOGIC_VECTOR (7 downto 0);
    signal i_5_fu_82_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ret_V_fu_88_p3 : STD_LOGIC_VECTOR (129 downto 0);
    signal t_V_3_fu_101_p2 : STD_LOGIC_VECTOR (128 downto 0);
    signal icmp_ln1035_fu_96_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal t_V_fu_107_p2 : STD_LOGIC_VECTOR (128 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    i_fu_32_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_fu_32 <= ap_const_lv8_0;
            elsif (((icmp_ln51_fu_76_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                i_fu_32 <= i_5_fu_82_p2;
            end if; 
        end if;
    end process;

    rhs_fu_28_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                rhs_fu_28 <= zext_ln186_3_fu_51_p1;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                rhs_fu_28 <= t_V_4_reg_160;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                    conv_i_reg_147(127 downto 0) <= conv_i_fu_55_p1(127 downto 0);
                    zext_ln186_reg_152(127 downto 0) <= zext_ln186_fu_59_p1(127 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln51_fu_76_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                t_V_4_reg_160 <= t_V_4_fu_112_p3;
            end if;
        end if;
    end process;
    conv_i_reg_147(129 downto 128) <= "00";
    zext_ln186_reg_152(128) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln51_fu_76_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln51_fu_76_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state2_blk <= ap_const_logic_0;
    ap_ST_fsm_state3_blk <= ap_const_logic_0;

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln51_fu_76_p2)
    begin
        if ((((icmp_ln51_fu_76_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, icmp_ln51_fu_76_p2)
    begin
        if (((icmp_ln51_fu_76_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_return <= rhs_fu_28(128 - 1 downto 0);
    conv_i_fu_55_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(N),130));
    i_5_fu_82_p2 <= std_logic_vector(unsigned(i_fu_32) + unsigned(ap_const_lv8_1));
    icmp_ln1035_fu_96_p2 <= "1" when (unsigned(ret_V_fu_88_p3) > unsigned(conv_i_reg_147)) else "0";
    icmp_ln51_fu_76_p2 <= "1" when (i_fu_32 = ap_const_lv8_80) else "0";
    ret_V_fu_88_p3 <= (rhs_fu_28 & ap_const_lv1_0);
    t_V_3_fu_101_p2 <= std_logic_vector(shift_left(unsigned(rhs_fu_28),to_integer(unsigned('0' & ap_const_lv129_lc_2(31-1 downto 0)))));
    t_V_4_fu_112_p3 <= 
        t_V_fu_107_p2 when (icmp_ln1035_fu_96_p2(0) = '1') else 
        t_V_3_fu_101_p2;
    t_V_fu_107_p2 <= std_logic_vector(unsigned(t_V_3_fu_101_p2) - unsigned(zext_ln186_reg_152));
    zext_ln186_3_fu_51_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(b),129));
    zext_ln186_fu_59_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(N),129));
end behav;
