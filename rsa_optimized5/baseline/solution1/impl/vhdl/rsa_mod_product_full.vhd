-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
-- Version: 2022.2
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity rsa_mod_product_full is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    a : IN STD_LOGIC_VECTOR (127 downto 0);
    b : IN STD_LOGIC_VECTOR (127 downto 0);
    N : IN STD_LOGIC_VECTOR (127 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (128 downto 0) );
end;


architecture behav of rsa_mod_product_full is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv129_lc_1 : STD_LOGIC_VECTOR (128 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv8_80 : STD_LOGIC_VECTOR (7 downto 0) := "10000000";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv129_lc_2 : STD_LOGIC_VECTOR (128 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv32_7F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111111";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal conv_i167_fu_77_p1 : STD_LOGIC_VECTOR (129 downto 0);
    signal conv_i167_reg_270 : STD_LOGIC_VECTOR (129 downto 0);
    signal zext_ln1496_fu_81_p1 : STD_LOGIC_VECTOR (128 downto 0);
    signal zext_ln1496_reg_276 : STD_LOGIC_VECTOR (128 downto 0);
    signal lhs_load_1_reg_285 : STD_LOGIC_VECTOR (128 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal icmp_ln175_fu_108_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ret_V_fu_131_p2 : STD_LOGIC_VECTOR (129 downto 0);
    signal ret_V_reg_290 : STD_LOGIC_VECTOR (129 downto 0);
    signal m_V_fu_137_p2 : STD_LOGIC_VECTOR (128 downto 0);
    signal m_V_reg_295 : STD_LOGIC_VECTOR (128 downto 0);
    signal t_V_6_fu_167_p3 : STD_LOGIC_VECTOR (128 downto 0);
    signal t_V_6_reg_301 : STD_LOGIC_VECTOR (128 downto 0);
    signal m_V_5_fu_208_p3 : STD_LOGIC_VECTOR (128 downto 0);
    signal m_V_5_reg_306 : STD_LOGIC_VECTOR (128 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal lhs_fu_36 : STD_LOGIC_VECTOR (128 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal lhs_1_fu_40 : STD_LOGIC_VECTOR (128 downto 0);
    signal zext_ln186_fu_73_p1 : STD_LOGIC_VECTOR (128 downto 0);
    signal i_fu_44 : STD_LOGIC_VECTOR (7 downto 0);
    signal i_7_fu_114_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal shr_i4_fu_48 : STD_LOGIC_VECTOR (127 downto 0);
    signal zext_ln1669_fu_225_p1 : STD_LOGIC_VECTOR (127 downto 0);
    signal zext_ln186_5_fu_127_p1 : STD_LOGIC_VECTOR (129 downto 0);
    signal zext_ln186_4_fu_123_p1 : STD_LOGIC_VECTOR (129 downto 0);
    signal ret_V_6_fu_143_p3 : STD_LOGIC_VECTOR (129 downto 0);
    signal t_V_5_fu_156_p2 : STD_LOGIC_VECTOR (128 downto 0);
    signal icmp_ln1035_fu_151_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal t_V_fu_162_p2 : STD_LOGIC_VECTOR (128 downto 0);
    signal icmp_ln1031_fu_187_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln1497_fu_183_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln1031_fu_195_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal m_V_3_fu_191_p2 : STD_LOGIC_VECTOR (128 downto 0);
    signal m_V_4_fu_201_p3 : STD_LOGIC_VECTOR (128 downto 0);
    signal r_V_fu_215_p4 : STD_LOGIC_VECTOR (126 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    i_fu_44_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_fu_44 <= ap_const_lv8_0;
            elsif (((icmp_ln175_fu_108_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                i_fu_44 <= i_7_fu_114_p2;
            end if; 
        end if;
    end process;

    lhs_1_fu_40_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                lhs_1_fu_40 <= zext_ln186_fu_73_p1;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                lhs_1_fu_40 <= t_V_6_reg_301;
            end if; 
        end if;
    end process;

    lhs_fu_36_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                lhs_fu_36 <= ap_const_lv129_lc_1;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                lhs_fu_36 <= m_V_5_reg_306;
            end if; 
        end if;
    end process;

    shr_i4_fu_48_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                shr_i4_fu_48 <= a;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                shr_i4_fu_48 <= zext_ln1669_fu_225_p1;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                    conv_i167_reg_270(127 downto 0) <= conv_i167_fu_77_p1(127 downto 0);
                    zext_ln1496_reg_276(127 downto 0) <= zext_ln1496_fu_81_p1(127 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln175_fu_108_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                lhs_load_1_reg_285 <= lhs_fu_36;
                m_V_reg_295 <= m_V_fu_137_p2;
                ret_V_reg_290 <= ret_V_fu_131_p2;
                t_V_6_reg_301 <= t_V_6_fu_167_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                m_V_5_reg_306 <= m_V_5_fu_208_p3;
            end if;
        end if;
    end process;
    conv_i167_reg_270(129 downto 128) <= "00";
    zext_ln1496_reg_276(128) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln175_fu_108_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln175_fu_108_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;
    and_ln1031_fu_195_p2 <= (trunc_ln1497_fu_183_p1 and icmp_ln1031_fu_187_p2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state2_blk <= ap_const_logic_0;
    ap_ST_fsm_state3_blk <= ap_const_logic_0;
    ap_ST_fsm_state4_blk <= ap_const_logic_0;

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln175_fu_108_p2)
    begin
        if ((((icmp_ln175_fu_108_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, icmp_ln175_fu_108_p2)
    begin
        if (((icmp_ln175_fu_108_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_return <= lhs_fu_36;
    conv_i167_fu_77_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(N),130));
    i_7_fu_114_p2 <= std_logic_vector(unsigned(i_fu_44) + unsigned(ap_const_lv8_1));
    icmp_ln1031_fu_187_p2 <= "1" when (unsigned(ret_V_reg_290) < unsigned(conv_i167_reg_270)) else "0";
    icmp_ln1035_fu_151_p2 <= "1" when (unsigned(ret_V_6_fu_143_p3) > unsigned(conv_i167_reg_270)) else "0";
    icmp_ln175_fu_108_p2 <= "1" when (i_fu_44 = ap_const_lv8_80) else "0";
    m_V_3_fu_191_p2 <= std_logic_vector(unsigned(m_V_reg_295) - unsigned(zext_ln1496_reg_276));
    m_V_4_fu_201_p3 <= 
        m_V_reg_295 when (and_ln1031_fu_195_p2(0) = '1') else 
        m_V_3_fu_191_p2;
    m_V_5_fu_208_p3 <= 
        m_V_4_fu_201_p3 when (trunc_ln1497_fu_183_p1(0) = '1') else 
        lhs_load_1_reg_285;
    m_V_fu_137_p2 <= std_logic_vector(unsigned(lhs_fu_36) + unsigned(lhs_1_fu_40));
    r_V_fu_215_p4 <= shr_i4_fu_48(127 downto 1);
    ret_V_6_fu_143_p3 <= (lhs_1_fu_40 & ap_const_lv1_0);
    ret_V_fu_131_p2 <= std_logic_vector(unsigned(zext_ln186_5_fu_127_p1) + unsigned(zext_ln186_4_fu_123_p1));
    t_V_5_fu_156_p2 <= std_logic_vector(shift_left(unsigned(lhs_1_fu_40),to_integer(unsigned('0' & ap_const_lv129_lc_2(31-1 downto 0)))));
    t_V_6_fu_167_p3 <= 
        t_V_fu_162_p2 when (icmp_ln1035_fu_151_p2(0) = '1') else 
        t_V_5_fu_156_p2;
    t_V_fu_162_p2 <= std_logic_vector(unsigned(t_V_5_fu_156_p2) - unsigned(zext_ln1496_reg_276));
    trunc_ln1497_fu_183_p1 <= shr_i4_fu_48(1 - 1 downto 0);
    zext_ln1496_fu_81_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(N),129));
    zext_ln1669_fu_225_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(r_V_fu_215_p4),128));
    zext_ln186_4_fu_123_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lhs_1_fu_40),130));
    zext_ln186_5_fu_127_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lhs_fu_36),130));
    zext_ln186_fu_73_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(b),129));
end behav;
