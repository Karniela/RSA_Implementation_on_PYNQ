

================================================================
== Vitis HLS Report for 'Montgomery_Pipeline_Montgomery'
================================================================
* Date:           Thu Dec  5 17:01:35 2024

* Version:        2022.2 (Build 3670227 on Oct 13 2022)
* Project:        rsa_opt2_hls
* Solution:       solution1 (Vivado IP Flow Target)
* Product family: zynq
* Target device:  xc7z020-clg400-1


================================================================
== Performance Estimates
================================================================
+ Timing: 
    * Summary: 
    +--------+----------+----------+------------+
    |  Clock |  Target  | Estimated| Uncertainty|
    +--------+----------+----------+------------+
    |ap_clk  |  10.00 ns|  6.584 ns|     2.70 ns|
    +--------+----------+----------+------------+

+ Latency: 
    * Summary: 
    +---------+---------+----------+----------+-----+-----+---------+
    |  Latency (cycles) |  Latency (absolute) |  Interval | Pipeline|
    |   min   |   max   |    min   |    max   | min | max |   Type  |
    +---------+---------+----------+----------+-----+-----+---------+
    |      258|      258|  2.580 us|  2.580 us|  258|  258|       no|
    +---------+---------+----------+----------+-----+-----+---------+

    + Detail: 
        * Instance: 
        N/A

        * Loop: 
        +--------------+---------+---------+----------+-----------+-----------+------+----------+
        |              |  Latency (cycles) | Iteration|  Initiation Interval  | Trip |          |
        |   Loop Name  |   min   |   max   |  Latency |  achieved |   target  | Count| Pipelined|
        +--------------+---------+---------+----------+-----------+-----------+------+----------+
        |- Montgomery  |      256|      256|         2|          1|          1|   256|       yes|
        +--------------+---------+---------+----------+-----------+-----------+------+----------+

============================================================
+ Verbose Summary: Synthesis Manager
============================================================
InlineROM: 1
ExposeGlobal: 0
============================================================
+ Verbose Summary: CDFG Model
============================================================
IsTopModel: 0
ResetActiveHigh: 1
IsCombinational: 0
IsDatapathOnly: 0
HasWiredReturn: 1
HasMFsm: 2
HasVarLatency: 1
IsPipeline: 0
IsRtlPipelined: 0
IsInstanceOverlapped: 0
IsDontTouch: 0
HasImplIP: 0
IsGatedGlobalClock: 0

+ Individual pipeline summary: 
  * Pipeline-0: initiation interval (II) = 1, depth = 3


============================================================
+ Verbose Summary: Schedule
============================================================
* Number of FSM states : 3
* Pipeline : 1
  Pipeline-0 : II = 1, D = 3, States = { 1 2 3 }
* Dataflow Pipeline: 0

* FSM state transitions: 
1 --> 2 
2 --> 3 
3 --> 

* FSM state operations: 

State 1 <SV = 0> <Delay = 1.58>
ST_1 : Operation 5 [1/1] (0.00ns)   --->   "%m_V = alloca i32 1"   --->   Operation 5 'alloca' 'm_V' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 6 [1/1] (0.00ns)   --->   "%i_02 = alloca i32 1"   --->   Operation 6 'alloca' 'i_02' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 7 [1/1] (0.00ns)   --->   "%empty = alloca i32 1"   --->   Operation 7 'alloca' 'empty' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 8 [1/1] (0.00ns)   --->   "%add_ln186_read = read i257 @_ssdm_op_Read.ap_auto.i257, i257 %add_ln186"   --->   Operation 8 'read' 'add_ln186_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 9 [1/1] (0.00ns)   --->   "%zext_ln1495_1_read = read i256 @_ssdm_op_Read.ap_auto.i256, i256 %zext_ln1495_1"   --->   Operation 9 'read' 'zext_ln1495_1_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 10 [1/1] (0.00ns)   --->   "%zext_ln1495_read = read i256 @_ssdm_op_Read.ap_auto.i256, i256 %zext_ln1495"   --->   Operation 10 'read' 'zext_ln1495_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 11 [1/1] (0.00ns)   --->   "%b_cast_read = read i1 @_ssdm_op_Read.ap_auto.i1, i1 %b_cast"   --->   Operation 11 'read' 'b_cast_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 12 [1/1] (0.00ns)   --->   "%a_read = read i256 @_ssdm_op_Read.ap_auto.i256, i256 %a"   --->   Operation 12 'read' 'a_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 13 [1/1] (0.00ns)   --->   "%zext_ln1495_1_cast = zext i256 %zext_ln1495_1_read"   --->   Operation 13 'zext' 'zext_ln1495_1_cast' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 14 [1/1] (0.00ns)   --->   "%zext_ln1495_cast = zext i256 %zext_ln1495_read"   --->   Operation 14 'zext' 'zext_ln1495_cast' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 15 [1/1] (1.58ns)   --->   "%store_ln0 = store i256 %a_read, i256 %empty"   --->   Operation 15 'store' 'store_ln0' <Predicate = true> <Delay = 1.58>
ST_1 : Operation 16 [1/1] (1.58ns)   --->   "%store_ln0 = store i9 0, i9 %i_02"   --->   Operation 16 'store' 'store_ln0' <Predicate = true> <Delay = 1.58>
ST_1 : Operation 17 [1/1] (1.58ns)   --->   "%store_ln0 = store i257 0, i257 %m_V"   --->   Operation 17 'store' 'store_ln0' <Predicate = true> <Delay = 1.58>
ST_1 : Operation 18 [1/1] (0.00ns)   --->   "%br_ln0 = br void %for.body"   --->   Operation 18 'br' 'br_ln0' <Predicate = true> <Delay = 0.00>

State 2 <SV = 1> <Delay = 5.97>
ST_2 : Operation 19 [1/1] (0.00ns)   --->   "%i = load i9 %i_02" [rsa.cpp:22]   --->   Operation 19 'load' 'i' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 20 [1/1] (1.66ns)   --->   "%icmp_ln22 = icmp_eq  i9 %i, i9 256" [rsa.cpp:22]   --->   Operation 20 'icmp' 'icmp_ln22' <Predicate = true> <Delay = 1.66> <CoreInst = "Cmp">   --->   Core 9 'Cmp' <Latency = 0> <II = 1> <Delay = 1.66> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 21 [1/1] (0.00ns)   --->   "%empty_26 = speclooptripcount i32 @_ssdm_op_SpecLoopTripCount, i64 256, i64 256, i64 256"   --->   Operation 21 'speclooptripcount' 'empty_26' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 22 [1/1] (1.82ns)   --->   "%i_5 = add i9 %i, i9 1" [rsa.cpp:22]   --->   Operation 22 'add' 'i_5' <Predicate = true> <Delay = 1.82> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 1.82> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 23 [1/1] (0.00ns)   --->   "%br_ln22 = br i1 %icmp_ln22, void %for.body.split_ifconv, void %for.end.exitStub" [rsa.cpp:22]   --->   Operation 23 'br' 'br_ln22' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 24 [1/1] (0.00ns)   --->   "%m_V_load = load i257 %m_V"   --->   Operation 24 'load' 'm_V_load' <Predicate = (!icmp_ln22)> <Delay = 0.00>
ST_2 : Operation 25 [1/1] (0.00ns)   --->   "%p_load = load i256 %empty" [rsa.cpp:22]   --->   Operation 25 'load' 'p_load' <Predicate = (!icmp_ln22)> <Delay = 0.00>
ST_2 : Operation 26 [1/1] (0.00ns)   --->   "%zext_ln22 = zext i257 %m_V_load" [rsa.cpp:22]   --->   Operation 26 'zext' 'zext_ln22' <Predicate = (!icmp_ln22)> <Delay = 0.00>
ST_2 : Operation 27 [1/1] (0.00ns)   --->   "%trunc_ln22 = trunc i256 %p_load" [rsa.cpp:22]   --->   Operation 27 'trunc' 'trunc_ln22' <Predicate = (!icmp_ln22)> <Delay = 0.00>
ST_2 : Operation 28 [1/1] (0.00ns)   --->   "%trunc_ln1497 = trunc i257 %m_V_load"   --->   Operation 28 'trunc' 'trunc_ln1497' <Predicate = (!icmp_ln22)> <Delay = 0.00>
ST_2 : Operation 29 [1/1] (0.00ns) (grouped into LUT with out node or_ln43)   --->   "%xor_ln541 = xor i1 %trunc_ln1497, i1 %b_cast_read"   --->   Operation 29 'xor' 'xor_ln541' <Predicate = (!icmp_ln22)> <Delay = 0.00> <CoreInst = "LogicGate">   --->   Core 74 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.97> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 30 [1/1] (0.00ns) (grouped into LUT with out node and_ln43_1)   --->   "%xor_ln901 = xor i1 %trunc_ln22, i1 1"   --->   Operation 30 'xor' 'xor_ln901' <Predicate = (!icmp_ln22)> <Delay = 0.00> <CoreInst = "LogicGate">   --->   Core 74 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.97> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 31 [2/2] (3.44ns)   --->   "%add_ln186_1 = add i258 %zext_ln22, i258 %zext_ln1495_cast"   --->   Operation 31 'add' 'add_ln186_1' <Predicate = (!icmp_ln22)> <Delay = 3.44> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 1> <II = 1> <Delay = 3.44> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 32 [1/1] (0.00ns) (grouped into LUT with out node or_ln43)   --->   "%and_ln43 = and i1 %trunc_ln22, i1 %xor_ln541" [rsa.cpp:43]   --->   Operation 32 'and' 'and_ln43' <Predicate = (!icmp_ln22)> <Delay = 0.00> <CoreInst = "LogicGate">   --->   Core 74 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.97> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 33 [1/1] (0.97ns) (out node of the LUT)   --->   "%and_ln43_1 = and i1 %trunc_ln1497, i1 %xor_ln901" [rsa.cpp:43]   --->   Operation 33 'and' 'and_ln43_1' <Predicate = (!icmp_ln22)> <Delay = 0.97> <CoreInst = "LogicGate">   --->   Core 74 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.97> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 34 [1/1] (1.55ns)   --->   "%select_ln43 = select i1 %and_ln43_1, i257 %zext_ln1495_1_cast, i257 %add_ln186_read" [rsa.cpp:43]   --->   Operation 34 'select' 'select_ln43' <Predicate = (!icmp_ln22)> <Delay = 1.55> <CoreInst = "Sel">   --->   Core 73 'Sel' <Latency = 0> <II = 1> <Delay = 1.55> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_2 : Operation 35 [1/1] (0.00ns)   --->   "%zext_ln43 = zext i257 %select_ln43" [rsa.cpp:43]   --->   Operation 35 'zext' 'zext_ln43' <Predicate = (!icmp_ln22)> <Delay = 0.00>
ST_2 : Operation 36 [2/2] (3.44ns)   --->   "%add_ln43 = add i258 %zext_ln22, i258 %zext_ln43" [rsa.cpp:43]   --->   Operation 36 'add' 'add_ln43' <Predicate = (!icmp_ln22)> <Delay = 3.44> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 1> <II = 1> <Delay = 3.44> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 37 [1/1] (0.97ns) (out node of the LUT)   --->   "%or_ln43 = or i1 %and_ln43_1, i1 %and_ln43" [rsa.cpp:43]   --->   Operation 37 'or' 'or_ln43' <Predicate = (!icmp_ln22)> <Delay = 0.97> <CoreInst = "LogicGate">   --->   Core 74 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.97> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 38 [1/1] (0.00ns)   --->   "%r_V = partselect i255 @_ssdm_op_PartSelect.i255.i256.i32.i32, i256 %p_load, i32 1, i32 255"   --->   Operation 38 'partselect' 'r_V' <Predicate = (!icmp_ln22)> <Delay = 0.00>
ST_2 : Operation 39 [1/1] (0.00ns)   --->   "%zext_ln1669_1 = zext i255 %r_V"   --->   Operation 39 'zext' 'zext_ln1669_1' <Predicate = (!icmp_ln22)> <Delay = 0.00>
ST_2 : Operation 40 [1/1] (1.58ns)   --->   "%store_ln22 = store i256 %zext_ln1669_1, i256 %empty" [rsa.cpp:22]   --->   Operation 40 'store' 'store_ln22' <Predicate = (!icmp_ln22)> <Delay = 1.58>
ST_2 : Operation 41 [1/1] (1.58ns)   --->   "%store_ln22 = store i9 %i_5, i9 %i_02" [rsa.cpp:22]   --->   Operation 41 'store' 'store_ln22' <Predicate = (!icmp_ln22)> <Delay = 1.58>
ST_2 : Operation 54 [1/1] (0.00ns)   --->   "%m_V_load_2 = load i257 %m_V"   --->   Operation 54 'load' 'm_V_load_2' <Predicate = (icmp_ln22)> <Delay = 0.00>
ST_2 : Operation 55 [1/1] (0.00ns)   --->   "%write_ln0 = write void @_ssdm_op_Write.ap_auto.i257P0A, i257 %m_V_out, i257 %m_V_load_2"   --->   Operation 55 'write' 'write_ln0' <Predicate = (icmp_ln22)> <Delay = 0.00>
ST_2 : Operation 56 [1/1] (0.00ns)   --->   "%ret_ln0 = ret"   --->   Operation 56 'ret' 'ret_ln0' <Predicate = (icmp_ln22)> <Delay = 0.00>

State 3 <SV = 2> <Delay = 6.58>
ST_3 : Operation 42 [1/1] (0.00ns)   --->   "%specpipeline_ln23 = specpipeline void @_ssdm_op_SpecPipeline, i32 1, i32 0, i32 0, i32 0, void @empty_0" [rsa.cpp:23]   --->   Operation 42 'specpipeline' 'specpipeline_ln23' <Predicate = true> <Delay = 0.00>
ST_3 : Operation 43 [1/1] (0.00ns)   --->   "%specloopname_ln1633 = specloopname void @_ssdm_op_SpecLoopName, void @empty_10"   --->   Operation 43 'specloopname' 'specloopname_ln1633' <Predicate = true> <Delay = 0.00>
ST_3 : Operation 44 [1/2] (3.44ns)   --->   "%add_ln186_1 = add i258 %zext_ln22, i258 %zext_ln1495_cast"   --->   Operation 44 'add' 'add_ln186_1' <Predicate = true> <Delay = 3.44> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 1> <II = 1> <Delay = 3.44> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_3 : Operation 45 [1/2] (3.44ns)   --->   "%add_ln43 = add i258 %zext_ln22, i258 %zext_ln43" [rsa.cpp:43]   --->   Operation 45 'add' 'add_ln43' <Predicate = true> <Delay = 3.44> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 1> <II = 1> <Delay = 3.44> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_3 : Operation 46 [1/1] (0.00ns) (grouped into LUT with out node select_ln43_2)   --->   "%tmp = partselect i256 @_ssdm_op_PartSelect.i256.i257.i32.i32, i257 %m_V_load, i32 1, i32 256"   --->   Operation 46 'partselect' 'tmp' <Predicate = (!trunc_ln22 & !or_ln43)> <Delay = 0.00>
ST_3 : Operation 47 [1/1] (0.00ns) (grouped into LUT with out node select_ln43_2)   --->   "%zext_ln1669 = zext i256 %tmp"   --->   Operation 47 'zext' 'zext_ln1669' <Predicate = (!trunc_ln22 & !or_ln43)> <Delay = 0.00>
ST_3 : Operation 48 [1/1] (0.00ns) (grouped into LUT with out node select_ln43_2)   --->   "%tmp_1 = partselect i257 @_ssdm_op_PartSelect.i257.i258.i32.i32, i258 %add_ln43, i32 1, i32 257"   --->   Operation 48 'partselect' 'tmp_1' <Predicate = (or_ln43)> <Delay = 0.00>
ST_3 : Operation 49 [1/1] (0.00ns) (grouped into LUT with out node select_ln43_2)   --->   "%tmp_2 = partselect i257 @_ssdm_op_PartSelect.i257.i258.i32.i32, i258 %add_ln186_1, i32 1, i32 257"   --->   Operation 49 'partselect' 'tmp_2' <Predicate = (trunc_ln22 & !or_ln43)> <Delay = 0.00>
ST_3 : Operation 50 [1/1] (0.00ns) (grouped into LUT with out node select_ln43_2)   --->   "%select_ln43_1 = select i1 %trunc_ln22, i257 %tmp_2, i257 %zext_ln1669" [rsa.cpp:43]   --->   Operation 50 'select' 'select_ln43_1' <Predicate = (!or_ln43)> <Delay = 0.00> <CoreInst = "Sel">   --->   Core 73 'Sel' <Latency = 0> <II = 1> <Delay = 1.55> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_3 : Operation 51 [1/1] (1.55ns) (out node of the LUT)   --->   "%select_ln43_2 = select i1 %or_ln43, i257 %tmp_1, i257 %select_ln43_1" [rsa.cpp:43]   --->   Operation 51 'select' 'select_ln43_2' <Predicate = true> <Delay = 1.55> <CoreInst = "Sel">   --->   Core 73 'Sel' <Latency = 0> <II = 1> <Delay = 1.55> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_3 : Operation 52 [1/1] (1.58ns)   --->   "%store_ln22 = store i257 %select_ln43_2, i257 %m_V" [rsa.cpp:22]   --->   Operation 52 'store' 'store_ln22' <Predicate = true> <Delay = 1.58>
ST_3 : Operation 53 [1/1] (0.00ns)   --->   "%br_ln22 = br void %for.body" [rsa.cpp:22]   --->   Operation 53 'br' 'br_ln22' <Predicate = true> <Delay = 0.00>


============================================================
+ Verbose Summary: Timing violations
============================================================
Target clock period: 10ns, clock uncertainty: 2.7ns.

 <State 1>: 1.59ns
The critical path consists of the following:
	'alloca' operation ('empty') [9]  (0 ns)
	'store' operation ('store_ln0') of variable 'a_read' on local variable 'empty' [17]  (1.59 ns)

 <State 2>: 5.97ns
The critical path consists of the following:
	'load' operation ('m_V_load') on local variable 'm.V' [28]  (0 ns)
	'and' operation ('and_ln43_1', rsa.cpp:43) [39]  (0.978 ns)
	'select' operation ('select_ln43', rsa.cpp:43) [40]  (1.56 ns)
	'add' operation ('add_ln43', rsa.cpp:43) [42]  (3.44 ns)

 <State 3>: 6.58ns
The critical path consists of the following:
	'add' operation ('add_ln186_1') [37]  (3.44 ns)
	'select' operation ('select_ln43_1', rsa.cpp:43) [48]  (0 ns)
	'select' operation ('select_ln43_2', rsa.cpp:43) [49]  (1.56 ns)
	'store' operation ('store_ln22', rsa.cpp:22) of variable 'select_ln43_2', rsa.cpp:43 on local variable 'm.V' [54]  (1.59 ns)


============================================================
+ Verbose Summary: Binding
============================================================
N/A
* FSMD analyzer results:
  - Output states:
 - Input state : 
  - Chain level:
	State 1
	State 2
	State 3


============================================================
+ Verbose Summary: Datapath Resource usage 
============================================================
N/A
