// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
// Version: 2022.2
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="rsa_rsa,hls_ip_2022_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=6.584172,HLS_SYN_LAT=102148,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=9171,HLS_SYN_LUT=4558,HLS_VERSION=2022_2}" *)

module rsa (
        ap_clk,
        ap_rst_n,
        s_axi_control_AWVALID,
        s_axi_control_AWREADY,
        s_axi_control_AWADDR,
        s_axi_control_WVALID,
        s_axi_control_WREADY,
        s_axi_control_WDATA,
        s_axi_control_WSTRB,
        s_axi_control_ARVALID,
        s_axi_control_ARREADY,
        s_axi_control_ARADDR,
        s_axi_control_RVALID,
        s_axi_control_RREADY,
        s_axi_control_RDATA,
        s_axi_control_RRESP,
        s_axi_control_BVALID,
        s_axi_control_BREADY,
        s_axi_control_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 5'd1;
parameter    ap_ST_fsm_state2 = 5'd2;
parameter    ap_ST_fsm_state3 = 5'd4;
parameter    ap_ST_fsm_state4 = 5'd8;
parameter    ap_ST_fsm_state5 = 5'd16;
parameter    C_S_AXI_CONTROL_DATA_WIDTH = 32;
parameter    C_S_AXI_CONTROL_ADDR_WIDTH = 8;
parameter    C_S_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_CONTROL_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
input   s_axi_control_AWVALID;
output   s_axi_control_AWREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_AWADDR;
input   s_axi_control_WVALID;
output   s_axi_control_WREADY;
input  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_WDATA;
input  [C_S_AXI_CONTROL_WSTRB_WIDTH - 1:0] s_axi_control_WSTRB;
input   s_axi_control_ARVALID;
output   s_axi_control_ARREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_ARADDR;
output   s_axi_control_RVALID;
input   s_axi_control_RREADY;
output  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_RDATA;
output  [1:0] s_axi_control_RRESP;
output   s_axi_control_BVALID;
input   s_axi_control_BREADY;
output  [1:0] s_axi_control_BRESP;
output   interrupt;

 reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [4:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
wire   [255:0] d;
wire   [255:0] N;
wire   [255:0] y;
reg    x_ap_vld;
reg   [255:0] reg_135;
wire    ap_CS_fsm_state3;
wire   [0:0] icmp_ln88_fu_164_p2;
wire   [0:0] trunc_ln1497_fu_176_p1;
wire    ap_CS_fsm_state4;
wire    grp_Montgomery_fu_115_ap_done;
reg   [0:0] trunc_ln1497_reg_260;
reg    ap_block_state4_on_subcall_done;
reg   [255:0] y_read_reg_241;
reg   [255:0] N_read_reg_246;
wire   [8:0] i_2_fu_170_p2;
reg   [8:0] i_2_reg_255;
reg   [255:0] m_V_load_1_reg_264;
wire    grp_mod_product_fu_107_ap_start;
wire    grp_mod_product_fu_107_ap_done;
wire    grp_mod_product_fu_107_ap_idle;
wire    grp_mod_product_fu_107_ap_ready;
wire   [255:0] grp_mod_product_fu_107_ap_return;
wire    grp_Montgomery_fu_115_ap_start;
wire    grp_Montgomery_fu_115_ap_idle;
wire    grp_Montgomery_fu_115_ap_ready;
reg   [255:0] grp_Montgomery_fu_115_a;
wire   [255:0] grp_Montgomery_fu_115_ap_return;
reg    grp_mod_product_fu_107_ap_start_reg;
wire    ap_CS_fsm_state2;
reg    grp_Montgomery_fu_115_ap_start_reg;
wire    ap_CS_fsm_state5;
reg   [255:0] t_V_1_fu_66;
reg   [255:0] d_V_fu_70;
wire   [255:0] zext_ln1669_fu_199_p1;
reg   [8:0] i_fu_74;
reg   [255:0] m_V_fu_78;
wire   [254:0] r_V_fu_189_p4;
reg   [4:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
reg    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
reg    ap_ST_fsm_state4_blk;
reg    ap_ST_fsm_state5_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 5'd1;
#0 grp_mod_product_fu_107_ap_start_reg = 1'b0;
#0 grp_Montgomery_fu_115_ap_start_reg = 1'b0;
end

rsa_mod_product grp_mod_product_fu_107(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_mod_product_fu_107_ap_start),
    .ap_done(grp_mod_product_fu_107_ap_done),
    .ap_idle(grp_mod_product_fu_107_ap_idle),
    .ap_ready(grp_mod_product_fu_107_ap_ready),
    .b(y_read_reg_241),
    .N(N_read_reg_246),
    .ap_return(grp_mod_product_fu_107_ap_return)
);

rsa_Montgomery grp_Montgomery_fu_115(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_Montgomery_fu_115_ap_start),
    .ap_done(grp_Montgomery_fu_115_ap_done),
    .ap_idle(grp_Montgomery_fu_115_ap_idle),
    .ap_ready(grp_Montgomery_fu_115_ap_ready),
    .N(N_read_reg_246),
    .a(grp_Montgomery_fu_115_a),
    .b(reg_135),
    .ap_return(grp_Montgomery_fu_115_ap_return)
);

rsa_control_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CONTROL_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CONTROL_DATA_WIDTH ))
control_s_axi_U(
    .AWVALID(s_axi_control_AWVALID),
    .AWREADY(s_axi_control_AWREADY),
    .AWADDR(s_axi_control_AWADDR),
    .WVALID(s_axi_control_WVALID),
    .WREADY(s_axi_control_WREADY),
    .WDATA(s_axi_control_WDATA),
    .WSTRB(s_axi_control_WSTRB),
    .ARVALID(s_axi_control_ARVALID),
    .ARREADY(s_axi_control_ARREADY),
    .ARADDR(s_axi_control_ARADDR),
    .RVALID(s_axi_control_RVALID),
    .RREADY(s_axi_control_RREADY),
    .RDATA(s_axi_control_RDATA),
    .RRESP(s_axi_control_RRESP),
    .BVALID(s_axi_control_BVALID),
    .BREADY(s_axi_control_BREADY),
    .BRESP(s_axi_control_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .d(d),
    .N(N),
    .y(y),
    .x(m_V_fu_78),
    .x_ap_vld(x_ap_vld),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_Montgomery_fu_115_ap_start_reg <= 1'b0;
    end else begin
        if ((((1'b0 == ap_block_state4_on_subcall_done) & (1'b1 == ap_CS_fsm_state4)) | ((trunc_ln1497_fu_176_p1 == 1'd1) & (icmp_ln88_fu_164_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3)))) begin
            grp_Montgomery_fu_115_ap_start_reg <= 1'b1;
        end else if ((grp_Montgomery_fu_115_ap_ready == 1'b1)) begin
            grp_Montgomery_fu_115_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_mod_product_fu_107_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            grp_mod_product_fu_107_ap_start_reg <= 1'b1;
        end else if ((grp_mod_product_fu_107_ap_ready == 1'b1)) begin
            grp_mod_product_fu_107_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        d_V_fu_70 <= d;
    end else if (((grp_Montgomery_fu_115_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state5))) begin
        d_V_fu_70 <= zext_ln1669_fu_199_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_fu_74 <= 9'd0;
    end else if (((1'b0 == ap_block_state4_on_subcall_done) & (1'b1 == ap_CS_fsm_state4))) begin
        i_fu_74 <= i_2_reg_255;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        m_V_fu_78 <= 256'd1;
    end else if (((1'b0 == ap_block_state4_on_subcall_done) & (trunc_ln1497_reg_260 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        m_V_fu_78 <= grp_Montgomery_fu_115_ap_return;
    end
end

always @ (posedge ap_clk) begin
    if (((grp_mod_product_fu_107_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
        t_V_1_fu_66 <= grp_mod_product_fu_107_ap_return;
    end else if (((grp_Montgomery_fu_115_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state5))) begin
        t_V_1_fu_66 <= grp_Montgomery_fu_115_ap_return;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        N_read_reg_246 <= N;
        y_read_reg_241 <= y;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        i_2_reg_255 <= i_2_fu_170_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((trunc_ln1497_fu_176_p1 == 1'd1) & (icmp_ln88_fu_164_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        m_V_load_1_reg_264 <= m_V_fu_78;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b0 == ap_block_state4_on_subcall_done) & (1'b1 == ap_CS_fsm_state4)) | ((trunc_ln1497_fu_176_p1 == 1'd1) & (icmp_ln88_fu_164_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3)))) begin
        reg_135 <= t_V_1_fu_66;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln88_fu_164_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        trunc_ln1497_reg_260 <= trunc_ln1497_fu_176_p1;
    end
end

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

always @ (*) begin
    if ((grp_mod_product_fu_107_ap_done == 1'b0)) begin
        ap_ST_fsm_state2_blk = 1'b1;
    end else begin
        ap_ST_fsm_state2_blk = 1'b0;
    end
end

assign ap_ST_fsm_state3_blk = 1'b0;

always @ (*) begin
    if ((1'b1 == ap_block_state4_on_subcall_done)) begin
        ap_ST_fsm_state4_blk = 1'b1;
    end else begin
        ap_ST_fsm_state4_blk = 1'b0;
    end
end

always @ (*) begin
    if ((grp_Montgomery_fu_115_ap_done == 1'b0)) begin
        ap_ST_fsm_state5_blk = 1'b1;
    end else begin
        ap_ST_fsm_state5_blk = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln88_fu_164_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln88_fu_164_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        grp_Montgomery_fu_115_a = reg_135;
    end else if (((trunc_ln1497_reg_260 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        grp_Montgomery_fu_115_a = m_V_load_1_reg_264;
    end else begin
        grp_Montgomery_fu_115_a = 'bx;
    end
end

always @ (*) begin
    if (((icmp_ln88_fu_164_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        x_ap_vld = 1'b1;
    end else begin
        x_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((grp_mod_product_fu_107_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((icmp_ln88_fu_164_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((1'b0 == ap_block_state4_on_subcall_done) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((grp_Montgomery_fu_115_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

always @ (*) begin
    ap_block_state4_on_subcall_done = ((trunc_ln1497_reg_260 == 1'd1) & (grp_Montgomery_fu_115_ap_done == 1'b0));
end

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign grp_Montgomery_fu_115_ap_start = grp_Montgomery_fu_115_ap_start_reg;

assign grp_mod_product_fu_107_ap_start = grp_mod_product_fu_107_ap_start_reg;

assign i_2_fu_170_p2 = (i_fu_74 + 9'd1);

assign icmp_ln88_fu_164_p2 = ((i_fu_74 == 9'd256) ? 1'b1 : 1'b0);

assign r_V_fu_189_p4 = {{d_V_fu_70[255:1]}};

assign trunc_ln1497_fu_176_p1 = d_V_fu_70[0:0];

assign zext_ln1669_fu_199_p1 = r_V_fu_189_p4;

endmodule //rsa
