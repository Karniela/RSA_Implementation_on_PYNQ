// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
// Version: 2022.2
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module rsa_mod_product (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        b,
        N,
        ap_return
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_state2 = 3'd2;
parameter    ap_ST_fsm_state3 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [255:0] b;
input  [255:0] N;
output  [255:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;

(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [257:0] conv_i_fu_55_p1;
reg   [257:0] conv_i_reg_146;
wire   [256:0] zext_ln186_fu_59_p1;
reg   [256:0] zext_ln186_reg_151;
wire   [0:0] icmp_ln1035_fu_96_p2;
reg   [0:0] icmp_ln1035_reg_159;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln45_fu_76_p2;
wire   [256:0] t_V_2_fu_101_p2;
reg   [256:0] t_V_2_reg_164;
reg   [256:0] rhs_fu_28;
wire   [256:0] t_V_3_fu_121_p3;
wire   [256:0] zext_ln186_1_fu_51_p1;
wire    ap_CS_fsm_state3;
reg   [8:0] i_fu_32;
wire   [8:0] i_4_fu_82_p2;
wire   [257:0] ret_V_fu_88_p3;
wire   [256:0] grp_fu_107_p0;
wire   [256:0] grp_fu_107_p2;
reg   [2:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 3'd1;
end

rsa_sub_257ns_257ns_257_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 257 ),
    .din1_WIDTH( 257 ),
    .dout_WIDTH( 257 ))
sub_257ns_257ns_257_2_1_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_107_p0),
    .din1(zext_ln186_reg_151),
    .ce(1'b1),
    .dout(grp_fu_107_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        i_fu_32 <= 9'd0;
    end else if (((icmp_ln45_fu_76_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        i_fu_32 <= i_4_fu_82_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        rhs_fu_28 <= zext_ln186_1_fu_51_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        rhs_fu_28 <= t_V_3_fu_121_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        conv_i_reg_146[255 : 0] <= conv_i_fu_55_p1[255 : 0];
        zext_ln186_reg_151[255 : 0] <= zext_ln186_fu_59_p1[255 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln45_fu_76_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        icmp_ln1035_reg_159 <= icmp_ln1035_fu_96_p2;
        t_V_2_reg_164[256 : 1] <= t_V_2_fu_101_p2[256 : 1];
    end
end

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

assign ap_ST_fsm_state3_blk = 1'b0;

always @ (*) begin
    if ((((icmp_ln45_fu_76_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln45_fu_76_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln45_fu_76_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_return = rhs_fu_28[255:0];

assign conv_i_fu_55_p1 = N;

assign grp_fu_107_p0 = rhs_fu_28 << 257'd1;

assign i_4_fu_82_p2 = (i_fu_32 + 9'd1);

assign icmp_ln1035_fu_96_p2 = ((ret_V_fu_88_p3 > conv_i_reg_146) ? 1'b1 : 1'b0);

assign icmp_ln45_fu_76_p2 = ((i_fu_32 == 9'd256) ? 1'b1 : 1'b0);

assign ret_V_fu_88_p3 = {{rhs_fu_28}, {1'd0}};

assign t_V_2_fu_101_p2 = rhs_fu_28 << 257'd1;

assign t_V_3_fu_121_p3 = ((icmp_ln1035_reg_159[0:0] == 1'b1) ? grp_fu_107_p2 : t_V_2_reg_164);

assign zext_ln186_1_fu_51_p1 = b;

assign zext_ln186_fu_59_p1 = N;

always @ (posedge ap_clk) begin
    conv_i_reg_146[257:256] <= 2'b00;
    zext_ln186_reg_151[256] <= 1'b0;
    t_V_2_reg_164[0] <= 1'b0;
end

endmodule //rsa_mod_product
