-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
-- Version: 2022.2
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity rsa is
generic (
    C_S_AXI_CONTROL_ADDR_WIDTH : INTEGER := 6;
    C_S_AXI_CONTROL_DATA_WIDTH : INTEGER := 32 );
port (
    s_axi_control_AWVALID : IN STD_LOGIC;
    s_axi_control_AWREADY : OUT STD_LOGIC;
    s_axi_control_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_WVALID : IN STD_LOGIC;
    s_axi_control_WREADY : OUT STD_LOGIC;
    s_axi_control_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH/8-1 downto 0);
    s_axi_control_ARVALID : IN STD_LOGIC;
    s_axi_control_ARREADY : OUT STD_LOGIC;
    s_axi_control_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_RVALID : OUT STD_LOGIC;
    s_axi_control_RREADY : IN STD_LOGIC;
    s_axi_control_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_control_BVALID : OUT STD_LOGIC;
    s_axi_control_BREADY : IN STD_LOGIC;
    s_axi_control_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    interrupt : OUT STD_LOGIC );
end;


architecture behav of rsa is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "rsa_rsa,hls_ip_2022_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=dataflow,HLS_SYN_CLOCK=7.107187,HLS_SYN_LAT=220,HLS_SYN_TPT=220,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=898,HLS_SYN_LUT=1428,HLS_VERSION=2022_2}";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_rst_n_inv : STD_LOGIC;
    signal d : STD_LOGIC_VECTOR (15 downto 0);
    signal N : STD_LOGIC_VECTOR (15 downto 0);
    signal y : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_start : STD_LOGIC;
    signal ap_ready : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal entry_proc_U0_ap_start : STD_LOGIC;
    signal entry_proc_U0_ap_done : STD_LOGIC;
    signal entry_proc_U0_ap_continue : STD_LOGIC;
    signal entry_proc_U0_ap_idle : STD_LOGIC;
    signal entry_proc_U0_ap_ready : STD_LOGIC;
    signal entry_proc_U0_d_c_din : STD_LOGIC_VECTOR (15 downto 0);
    signal entry_proc_U0_d_c_write : STD_LOGIC;
    signal mod_product_U0_ap_start : STD_LOGIC;
    signal mod_product_U0_ap_done : STD_LOGIC;
    signal mod_product_U0_ap_continue : STD_LOGIC;
    signal mod_product_U0_ap_idle : STD_LOGIC;
    signal mod_product_U0_ap_ready : STD_LOGIC;
    signal mod_product_U0_N_c_din : STD_LOGIC_VECTOR (15 downto 0);
    signal mod_product_U0_N_c_write : STD_LOGIC;
    signal mod_product_U0_ap_return : STD_LOGIC_VECTOR (15 downto 0);
    signal t_V_full_n : STD_LOGIC;
    signal Loop_VITIS_LOOP_93_1_proc_U0_ap_start : STD_LOGIC;
    signal Loop_VITIS_LOOP_93_1_proc_U0_ap_done : STD_LOGIC;
    signal Loop_VITIS_LOOP_93_1_proc_U0_ap_continue : STD_LOGIC;
    signal Loop_VITIS_LOOP_93_1_proc_U0_ap_idle : STD_LOGIC;
    signal Loop_VITIS_LOOP_93_1_proc_U0_ap_ready : STD_LOGIC;
    signal Loop_VITIS_LOOP_93_1_proc_U0_N_read : STD_LOGIC;
    signal Loop_VITIS_LOOP_93_1_proc_U0_d_read : STD_LOGIC;
    signal Loop_VITIS_LOOP_93_1_proc_U0_ap_return : STD_LOGIC_VECTOR (15 downto 0);
    signal a_V_1_loc_channel_full_n : STD_LOGIC;
    signal Block_for_end_proc_U0_ap_start : STD_LOGIC;
    signal Block_for_end_proc_U0_ap_done : STD_LOGIC;
    signal Block_for_end_proc_U0_ap_continue : STD_LOGIC;
    signal Block_for_end_proc_U0_ap_idle : STD_LOGIC;
    signal Block_for_end_proc_U0_ap_ready : STD_LOGIC;
    signal Block_for_end_proc_U0_x : STD_LOGIC_VECTOR (15 downto 0);
    signal Block_for_end_proc_U0_x_ap_vld : STD_LOGIC;
    signal d_c_full_n : STD_LOGIC;
    signal d_c_dout : STD_LOGIC_VECTOR (15 downto 0);
    signal d_c_num_data_valid : STD_LOGIC_VECTOR (2 downto 0);
    signal d_c_fifo_cap : STD_LOGIC_VECTOR (2 downto 0);
    signal d_c_empty_n : STD_LOGIC;
    signal N_c_full_n : STD_LOGIC;
    signal N_c_dout : STD_LOGIC_VECTOR (15 downto 0);
    signal N_c_num_data_valid : STD_LOGIC_VECTOR (1 downto 0);
    signal N_c_fifo_cap : STD_LOGIC_VECTOR (1 downto 0);
    signal N_c_empty_n : STD_LOGIC;
    signal t_V_dout : STD_LOGIC_VECTOR (15 downto 0);
    signal t_V_num_data_valid : STD_LOGIC_VECTOR (1 downto 0);
    signal t_V_fifo_cap : STD_LOGIC_VECTOR (1 downto 0);
    signal t_V_empty_n : STD_LOGIC;
    signal a_V_1_loc_channel_dout : STD_LOGIC_VECTOR (15 downto 0);
    signal a_V_1_loc_channel_num_data_valid : STD_LOGIC_VECTOR (1 downto 0);
    signal a_V_1_loc_channel_fifo_cap : STD_LOGIC_VECTOR (1 downto 0);
    signal a_V_1_loc_channel_empty_n : STD_LOGIC;
    signal ap_sync_ready : STD_LOGIC;
    signal ap_sync_reg_entry_proc_U0_ap_ready : STD_LOGIC := '0';
    signal ap_sync_entry_proc_U0_ap_ready : STD_LOGIC;
    signal ap_sync_reg_mod_product_U0_ap_ready : STD_LOGIC := '0';
    signal ap_sync_mod_product_U0_ap_ready : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component rsa_entry_proc IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        d : IN STD_LOGIC_VECTOR (15 downto 0);
        d_c_din : OUT STD_LOGIC_VECTOR (15 downto 0);
        d_c_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
        d_c_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
        d_c_full_n : IN STD_LOGIC;
        d_c_write : OUT STD_LOGIC );
    end component;


    component rsa_mod_product IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        b : IN STD_LOGIC_VECTOR (15 downto 0);
        N : IN STD_LOGIC_VECTOR (15 downto 0);
        N_c_din : OUT STD_LOGIC_VECTOR (15 downto 0);
        N_c_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
        N_c_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
        N_c_full_n : IN STD_LOGIC;
        N_c_write : OUT STD_LOGIC;
        ap_return : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component rsa_Loop_VITIS_LOOP_93_1_proc IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        p_read : IN STD_LOGIC_VECTOR (15 downto 0);
        N_dout : IN STD_LOGIC_VECTOR (15 downto 0);
        N_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
        N_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
        N_empty_n : IN STD_LOGIC;
        N_read : OUT STD_LOGIC;
        d_dout : IN STD_LOGIC_VECTOR (15 downto 0);
        d_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
        d_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
        d_empty_n : IN STD_LOGIC;
        d_read : OUT STD_LOGIC;
        ap_return : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component rsa_Block_for_end_proc IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        p_read : IN STD_LOGIC_VECTOR (15 downto 0);
        x : OUT STD_LOGIC_VECTOR (15 downto 0);
        x_ap_vld : OUT STD_LOGIC );
    end component;


    component rsa_fifo_w16_d3_S IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (15 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (15 downto 0);
        if_num_data_valid : OUT STD_LOGIC_VECTOR (2 downto 0);
        if_fifo_cap : OUT STD_LOGIC_VECTOR (2 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component rsa_fifo_w16_d2_S IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (15 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (15 downto 0);
        if_num_data_valid : OUT STD_LOGIC_VECTOR (1 downto 0);
        if_fifo_cap : OUT STD_LOGIC_VECTOR (1 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component rsa_control_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        d : OUT STD_LOGIC_VECTOR (15 downto 0);
        N : OUT STD_LOGIC_VECTOR (15 downto 0);
        y : OUT STD_LOGIC_VECTOR (15 downto 0);
        x : IN STD_LOGIC_VECTOR (15 downto 0);
        x_ap_vld : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC );
    end component;



begin
    control_s_axi_U : component rsa_control_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CONTROL_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CONTROL_DATA_WIDTH)
    port map (
        AWVALID => s_axi_control_AWVALID,
        AWREADY => s_axi_control_AWREADY,
        AWADDR => s_axi_control_AWADDR,
        WVALID => s_axi_control_WVALID,
        WREADY => s_axi_control_WREADY,
        WDATA => s_axi_control_WDATA,
        WSTRB => s_axi_control_WSTRB,
        ARVALID => s_axi_control_ARVALID,
        ARREADY => s_axi_control_ARREADY,
        ARADDR => s_axi_control_ARADDR,
        RVALID => s_axi_control_RVALID,
        RREADY => s_axi_control_RREADY,
        RDATA => s_axi_control_RDATA,
        RRESP => s_axi_control_RRESP,
        BVALID => s_axi_control_BVALID,
        BREADY => s_axi_control_BREADY,
        BRESP => s_axi_control_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        d => d,
        N => N,
        y => y,
        x => Block_for_end_proc_U0_x,
        x_ap_vld => Block_for_end_proc_U0_x_ap_vld,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle);

    entry_proc_U0 : component rsa_entry_proc
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => entry_proc_U0_ap_start,
        ap_done => entry_proc_U0_ap_done,
        ap_continue => entry_proc_U0_ap_continue,
        ap_idle => entry_proc_U0_ap_idle,
        ap_ready => entry_proc_U0_ap_ready,
        d => d,
        d_c_din => entry_proc_U0_d_c_din,
        d_c_num_data_valid => d_c_num_data_valid,
        d_c_fifo_cap => d_c_fifo_cap,
        d_c_full_n => d_c_full_n,
        d_c_write => entry_proc_U0_d_c_write);

    mod_product_U0 : component rsa_mod_product
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => mod_product_U0_ap_start,
        ap_done => mod_product_U0_ap_done,
        ap_continue => mod_product_U0_ap_continue,
        ap_idle => mod_product_U0_ap_idle,
        ap_ready => mod_product_U0_ap_ready,
        b => y,
        N => N,
        N_c_din => mod_product_U0_N_c_din,
        N_c_num_data_valid => N_c_num_data_valid,
        N_c_fifo_cap => N_c_fifo_cap,
        N_c_full_n => N_c_full_n,
        N_c_write => mod_product_U0_N_c_write,
        ap_return => mod_product_U0_ap_return);

    Loop_VITIS_LOOP_93_1_proc_U0 : component rsa_Loop_VITIS_LOOP_93_1_proc
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => Loop_VITIS_LOOP_93_1_proc_U0_ap_start,
        ap_done => Loop_VITIS_LOOP_93_1_proc_U0_ap_done,
        ap_continue => Loop_VITIS_LOOP_93_1_proc_U0_ap_continue,
        ap_idle => Loop_VITIS_LOOP_93_1_proc_U0_ap_idle,
        ap_ready => Loop_VITIS_LOOP_93_1_proc_U0_ap_ready,
        p_read => t_V_dout,
        N_dout => N_c_dout,
        N_num_data_valid => N_c_num_data_valid,
        N_fifo_cap => N_c_fifo_cap,
        N_empty_n => N_c_empty_n,
        N_read => Loop_VITIS_LOOP_93_1_proc_U0_N_read,
        d_dout => d_c_dout,
        d_num_data_valid => d_c_num_data_valid,
        d_fifo_cap => d_c_fifo_cap,
        d_empty_n => d_c_empty_n,
        d_read => Loop_VITIS_LOOP_93_1_proc_U0_d_read,
        ap_return => Loop_VITIS_LOOP_93_1_proc_U0_ap_return);

    Block_for_end_proc_U0 : component rsa_Block_for_end_proc
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => Block_for_end_proc_U0_ap_start,
        ap_done => Block_for_end_proc_U0_ap_done,
        ap_continue => Block_for_end_proc_U0_ap_continue,
        ap_idle => Block_for_end_proc_U0_ap_idle,
        ap_ready => Block_for_end_proc_U0_ap_ready,
        p_read => a_V_1_loc_channel_dout,
        x => Block_for_end_proc_U0_x,
        x_ap_vld => Block_for_end_proc_U0_x_ap_vld);

    d_c_U : component rsa_fifo_w16_d3_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => entry_proc_U0_d_c_din,
        if_full_n => d_c_full_n,
        if_write => entry_proc_U0_d_c_write,
        if_dout => d_c_dout,
        if_num_data_valid => d_c_num_data_valid,
        if_fifo_cap => d_c_fifo_cap,
        if_empty_n => d_c_empty_n,
        if_read => Loop_VITIS_LOOP_93_1_proc_U0_d_read);

    N_c_U : component rsa_fifo_w16_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => mod_product_U0_N_c_din,
        if_full_n => N_c_full_n,
        if_write => mod_product_U0_N_c_write,
        if_dout => N_c_dout,
        if_num_data_valid => N_c_num_data_valid,
        if_fifo_cap => N_c_fifo_cap,
        if_empty_n => N_c_empty_n,
        if_read => Loop_VITIS_LOOP_93_1_proc_U0_N_read);

    t_V_U : component rsa_fifo_w16_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => mod_product_U0_ap_return,
        if_full_n => t_V_full_n,
        if_write => mod_product_U0_ap_done,
        if_dout => t_V_dout,
        if_num_data_valid => t_V_num_data_valid,
        if_fifo_cap => t_V_fifo_cap,
        if_empty_n => t_V_empty_n,
        if_read => Loop_VITIS_LOOP_93_1_proc_U0_ap_ready);

    a_V_1_loc_channel_U : component rsa_fifo_w16_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Loop_VITIS_LOOP_93_1_proc_U0_ap_return,
        if_full_n => a_V_1_loc_channel_full_n,
        if_write => Loop_VITIS_LOOP_93_1_proc_U0_ap_done,
        if_dout => a_V_1_loc_channel_dout,
        if_num_data_valid => a_V_1_loc_channel_num_data_valid,
        if_fifo_cap => a_V_1_loc_channel_fifo_cap,
        if_empty_n => a_V_1_loc_channel_empty_n,
        if_read => Block_for_end_proc_U0_ap_ready);





    ap_sync_reg_entry_proc_U0_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_entry_proc_U0_ap_ready <= ap_const_logic_0;
            else
                if (((ap_sync_ready and ap_start) = ap_const_logic_1)) then 
                    ap_sync_reg_entry_proc_U0_ap_ready <= ap_const_logic_0;
                else 
                    ap_sync_reg_entry_proc_U0_ap_ready <= ap_sync_entry_proc_U0_ap_ready;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_mod_product_U0_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_mod_product_U0_ap_ready <= ap_const_logic_0;
            else
                if (((ap_sync_ready and ap_start) = ap_const_logic_1)) then 
                    ap_sync_reg_mod_product_U0_ap_ready <= ap_const_logic_0;
                else 
                    ap_sync_reg_mod_product_U0_ap_ready <= ap_sync_mod_product_U0_ap_ready;
                end if; 
            end if;
        end if;
    end process;

    Block_for_end_proc_U0_ap_continue <= ap_const_logic_1;
    Block_for_end_proc_U0_ap_start <= a_V_1_loc_channel_empty_n;
    Loop_VITIS_LOOP_93_1_proc_U0_ap_continue <= a_V_1_loc_channel_full_n;
    Loop_VITIS_LOOP_93_1_proc_U0_ap_start <= t_V_empty_n;
    ap_done <= Block_for_end_proc_U0_ap_done;
    ap_idle <= (mod_product_U0_ap_idle and (ap_const_logic_1 xor a_V_1_loc_channel_empty_n) and (t_V_empty_n xor ap_const_logic_1) and entry_proc_U0_ap_idle and Loop_VITIS_LOOP_93_1_proc_U0_ap_idle and Block_for_end_proc_U0_ap_idle);
    ap_ready <= ap_sync_ready;

    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    ap_sync_entry_proc_U0_ap_ready <= (entry_proc_U0_ap_ready or ap_sync_reg_entry_proc_U0_ap_ready);
    ap_sync_mod_product_U0_ap_ready <= (mod_product_U0_ap_ready or ap_sync_reg_mod_product_U0_ap_ready);
    ap_sync_ready <= (ap_sync_mod_product_U0_ap_ready and ap_sync_entry_proc_U0_ap_ready);
    entry_proc_U0_ap_continue <= ap_const_logic_1;
    entry_proc_U0_ap_start <= ((ap_sync_reg_entry_proc_U0_ap_ready xor ap_const_logic_1) and ap_start);
    mod_product_U0_ap_continue <= t_V_full_n;
    mod_product_U0_ap_start <= ((ap_sync_reg_mod_product_U0_ap_ready xor ap_const_logic_1) and ap_start);
end behav;
