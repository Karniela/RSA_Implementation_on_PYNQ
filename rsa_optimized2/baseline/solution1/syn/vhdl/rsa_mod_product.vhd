-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
-- Version: 2022.2
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity rsa_mod_product is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    b : IN STD_LOGIC_VECTOR (15 downto 0);
    N : IN STD_LOGIC_VECTOR (15 downto 0);
    N_c_din : OUT STD_LOGIC_VECTOR (15 downto 0);
    N_c_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
    N_c_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
    N_c_full_n : IN STD_LOGIC;
    N_c_write : OUT STD_LOGIC;
    ap_return : OUT STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of rsa_mod_product is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv17_10000 : STD_LOGIC_VECTOR (16 downto 0) := "10000000000000000";
    constant ap_const_lv17_0 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000000";
    constant ap_const_lv5_11 : STD_LOGIC_VECTOR (4 downto 0) := "10001";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv17_1 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000001";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";

attribute shreg_extract : string;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (1 downto 0) := "01";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal N_c_blk_n : STD_LOGIC;
    signal zext_ln186_2_fu_109_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal zext_ln186_2_reg_323 : STD_LOGIC_VECTOR (17 downto 0);
    signal zext_ln186_fu_113_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal zext_ln186_reg_329 : STD_LOGIC_VECTOR (16 downto 0);
    signal ap_phi_mux_phi_ln1495_phi_fu_99_p4 : STD_LOGIC_VECTOR (16 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal icmp_ln36_fu_144_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal m_V_9_fu_210_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal icmp_ln1019_fu_265_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal t_V_fu_60 : STD_LOGIC_VECTOR (16 downto 0);
    signal t_V_3_fu_243_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal zext_ln186_1_fu_105_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal i_1_fu_64 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_2_fu_150_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal conv3_i5_fu_68 : STD_LOGIC_VECTOR (16 downto 0);
    signal zext_ln1669_fu_261_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal m_V_fu_72 : STD_LOGIC_VECTOR (16 downto 0);
    signal zext_ln1495_fu_162_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal zext_ln1495_1_fu_166_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal ret_V_fu_170_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal m_V_6_fu_181_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal trunc_ln36_fu_192_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1031_fu_176_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln1031_fu_196_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal m_V_7_fu_187_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal m_V_8_fu_202_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal ret_V_1_fu_219_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal t_V_1_fu_232_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal icmp_ln1035_fu_227_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal t_V_2_fu_238_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal r_V_fu_251_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and ((icmp_ln1019_fu_265_p2 = ap_const_lv1_1) or (icmp_ln36_fu_144_p2 = ap_const_lv1_1)))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    conv3_i5_fu_68_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_start = ap_const_logic_0) or (ap_const_logic_0 = N_c_full_n) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                conv3_i5_fu_68 <= ap_const_lv17_10000;
            elsif (((icmp_ln1019_fu_265_p2 = ap_const_lv1_0) and (icmp_ln36_fu_144_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                conv3_i5_fu_68 <= zext_ln1669_fu_261_p1;
            end if; 
        end if;
    end process;

    i_1_fu_64_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_start = ap_const_logic_0) or (ap_const_logic_0 = N_c_full_n) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_1_fu_64 <= ap_const_lv5_0;
            elsif (((icmp_ln1019_fu_265_p2 = ap_const_lv1_0) and (icmp_ln36_fu_144_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                i_1_fu_64 <= i_2_fu_150_p2;
            end if; 
        end if;
    end process;

    m_V_fu_72_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_start = ap_const_logic_0) or (ap_const_logic_0 = N_c_full_n) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                m_V_fu_72 <= ap_const_lv17_0;
            elsif (((icmp_ln1019_fu_265_p2 = ap_const_lv1_0) and (icmp_ln36_fu_144_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                m_V_fu_72 <= m_V_9_fu_210_p3;
            end if; 
        end if;
    end process;

    t_V_fu_60_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_start = ap_const_logic_0) or (ap_const_logic_0 = N_c_full_n) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                t_V_fu_60 <= zext_ln186_1_fu_105_p1;
            elsif (((icmp_ln1019_fu_265_p2 = ap_const_lv1_0) and (icmp_ln36_fu_144_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                t_V_fu_60 <= t_V_3_fu_243_p3;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                    zext_ln186_2_reg_323(15 downto 0) <= zext_ln186_2_fu_109_p1(15 downto 0);
                    zext_ln186_reg_329(15 downto 0) <= zext_ln186_fu_113_p1(15 downto 0);
            end if;
        end if;
    end process;
    zext_ln186_2_reg_323(17 downto 16) <= "00";
    zext_ln186_reg_329(16) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, N_c_full_n, ap_CS_fsm_state2, icmp_ln36_fu_144_p2, icmp_ln1019_fu_265_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_start = ap_const_logic_0) or (ap_const_logic_0 = N_c_full_n) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and ((icmp_ln1019_fu_265_p2 = ap_const_lv1_1) or (icmp_ln36_fu_144_p2 = ap_const_lv1_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when others =>  
                ap_NS_fsm <= "XX";
        end case;
    end process;

    N_c_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, N_c_full_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            N_c_blk_n <= N_c_full_n;
        else 
            N_c_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    N_c_din <= N;

    N_c_write_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, N_c_full_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_const_logic_0 = N_c_full_n) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            N_c_write <= ap_const_logic_1;
        else 
            N_c_write <= ap_const_logic_0;
        end if; 
    end process;

    and_ln1031_fu_196_p2 <= (trunc_ln36_fu_192_p1 and icmp_ln1031_fu_176_p2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start, ap_done_reg, N_c_full_n)
    begin
        if (((ap_start = ap_const_logic_0) or (ap_const_logic_0 = N_c_full_n) or (ap_done_reg = ap_const_logic_1))) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state2_blk <= ap_const_logic_0;

    ap_block_state1_assign_proc : process(ap_start, ap_done_reg, N_c_full_n)
    begin
                ap_block_state1 <= ((ap_start = ap_const_logic_0) or (ap_const_logic_0 = N_c_full_n) or (ap_done_reg = ap_const_logic_1));
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state2, icmp_ln36_fu_144_p2, icmp_ln1019_fu_265_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and ((icmp_ln1019_fu_265_p2 = ap_const_lv1_1) or (icmp_ln36_fu_144_p2 = ap_const_lv1_1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_phi_ln1495_phi_fu_99_p4_assign_proc : process(ap_CS_fsm_state2, icmp_ln36_fu_144_p2, m_V_9_fu_210_p3, icmp_ln1019_fu_265_p2, m_V_fu_72)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
            if (((icmp_ln1019_fu_265_p2 = ap_const_lv1_1) and (icmp_ln36_fu_144_p2 = ap_const_lv1_0))) then 
                ap_phi_mux_phi_ln1495_phi_fu_99_p4 <= m_V_9_fu_210_p3;
            elsif ((icmp_ln36_fu_144_p2 = ap_const_lv1_1)) then 
                ap_phi_mux_phi_ln1495_phi_fu_99_p4 <= m_V_fu_72;
            else 
                ap_phi_mux_phi_ln1495_phi_fu_99_p4 <= "XXXXXXXXXXXXXXXXX";
            end if;
        else 
            ap_phi_mux_phi_ln1495_phi_fu_99_p4 <= "XXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, icmp_ln36_fu_144_p2, icmp_ln1019_fu_265_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and ((icmp_ln1019_fu_265_p2 = ap_const_lv1_1) or (icmp_ln36_fu_144_p2 = ap_const_lv1_1)))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_return <= ap_phi_mux_phi_ln1495_phi_fu_99_p4(16 - 1 downto 0);
    i_2_fu_150_p2 <= std_logic_vector(unsigned(i_1_fu_64) + unsigned(ap_const_lv5_1));
    icmp_ln1019_fu_265_p2 <= "1" when (r_V_fu_251_p4 = ap_const_lv16_0) else "0";
    icmp_ln1031_fu_176_p2 <= "1" when (unsigned(ret_V_fu_170_p2) < unsigned(zext_ln186_2_reg_323)) else "0";
    icmp_ln1035_fu_227_p2 <= "1" when (unsigned(ret_V_1_fu_219_p3) > unsigned(zext_ln186_2_reg_323)) else "0";
    icmp_ln36_fu_144_p2 <= "1" when (i_1_fu_64 = ap_const_lv5_11) else "0";
    m_V_6_fu_181_p2 <= std_logic_vector(unsigned(m_V_fu_72) + unsigned(t_V_fu_60));
    m_V_7_fu_187_p2 <= std_logic_vector(unsigned(m_V_6_fu_181_p2) - unsigned(zext_ln186_reg_329));
    m_V_8_fu_202_p3 <= 
        m_V_6_fu_181_p2 when (and_ln1031_fu_196_p2(0) = '1') else 
        m_V_7_fu_187_p2;
    m_V_9_fu_210_p3 <= 
        m_V_8_fu_202_p3 when (trunc_ln36_fu_192_p1(0) = '1') else 
        m_V_fu_72;
    r_V_fu_251_p4 <= conv3_i5_fu_68(16 downto 1);
    ret_V_1_fu_219_p3 <= (t_V_fu_60 & ap_const_lv1_0);
    ret_V_fu_170_p2 <= std_logic_vector(unsigned(zext_ln1495_fu_162_p1) + unsigned(zext_ln1495_1_fu_166_p1));
    t_V_1_fu_232_p2 <= std_logic_vector(shift_left(unsigned(t_V_fu_60),to_integer(unsigned('0' & ap_const_lv17_1(17-1 downto 0)))));
    t_V_2_fu_238_p2 <= std_logic_vector(unsigned(t_V_1_fu_232_p2) - unsigned(zext_ln186_reg_329));
    t_V_3_fu_243_p3 <= 
        t_V_2_fu_238_p2 when (icmp_ln1035_fu_227_p2(0) = '1') else 
        t_V_1_fu_232_p2;
    trunc_ln36_fu_192_p1 <= conv3_i5_fu_68(1 - 1 downto 0);
    zext_ln1495_1_fu_166_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(t_V_fu_60),18));
    zext_ln1495_fu_162_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(m_V_fu_72),18));
    zext_ln1669_fu_261_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(r_V_fu_251_p4),17));
    zext_ln186_1_fu_105_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(b),17));
    zext_ln186_2_fu_109_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(N),18));
    zext_ln186_fu_113_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(N),17));
end behav;
