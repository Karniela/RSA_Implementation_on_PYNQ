

================================================================
== Vitis HLS Report for 'rsa'
================================================================
* Date:           Tue Dec  3 22:25:43 2024

* Version:        2022.2 (Build 3670227 on Oct 13 2022)
* Project:        baseline
* Solution:       solution1 (Vivado IP Flow Target)
* Product family: zynq
* Target device:  xc7z020-clg400-1


================================================================
== Performance Estimates
================================================================
+ Timing: 
    * Summary: 
    +--------+----------+----------+------------+
    |  Clock |  Target  | Estimated| Uncertainty|
    +--------+----------+----------+------------+
    |ap_clk  |  10.00 ns|  6.584 ns|     2.70 ns|
    +--------+----------+----------+------------+

+ Latency: 
    * Summary: 
    +---------+---------+----------+----------+-------+--------+---------+
    |  Latency (cycles) |  Latency (absolute) |    Interval    | Pipeline|
    |   min   |   max   |    min   |    max   |  min  |   max  |   Type  |
    +---------+---------+----------+----------+-------+--------+---------+
    |    68356|   135684|  0.684 ms|  1.357 ms|  68357|  135685|       no|
    +---------+---------+----------+----------+-------+--------+---------+

    + Detail: 
        * Instance: 
        N/A

        * Loop: 
        +-----------+---------+---------+-----------+-----------+-----------+------+----------+
        |           |  Latency (cycles) | Iteration |  Initiation Interval  | Trip |          |
        | Loop Name |   min   |   max   |  Latency  |  achieved |   target  | Count| Pipelined|
        +-----------+---------+---------+-----------+-----------+-----------+------+----------+
        |- RSA_TOP  |    68096|   135424|  266 ~ 529|          -|          -|   256|        no|
        +-----------+---------+---------+-----------+-----------+-----------+------+----------+

============================================================
+ Verbose Summary: Synthesis Manager
============================================================
InlineROM: 1
ExposeGlobal: 0
============================================================
+ Verbose Summary: CDFG Model
============================================================
IsTopModel: 1
ResetActiveHigh: 1
IsCombinational: 0
IsDatapathOnly: 0
HasWiredReturn: 1
HasMFsm: 0
HasVarLatency: 1
IsPipeline: 0
IsRtlPipelined: 0
IsInstanceOverlapped: 0
IsDontTouch: 0
HasImplIP: 0
IsGatedGlobalClock: 0


============================================================
+ Verbose Summary: Schedule
============================================================
* Number of FSM states : 5
* Pipeline : 0
* Dataflow Pipeline: 0

* FSM state transitions: 
1 --> 2 
2 --> 3 
3 --> 4 
4 --> 5 
5 --> 3 

* FSM state operations: 

State 1 <SV = 0> <Delay = 2.58>
ST_1 : Operation 6 [1/1] (0.00ns)   --->   "%t_V_1 = alloca i32 1"   --->   Operation 6 'alloca' 't_V_1' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 7 [1/1] (0.00ns)   --->   "%d_V = alloca i32 1"   --->   Operation 7 'alloca' 'd_V' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 8 [1/1] (0.00ns)   --->   "%i = alloca i32 1"   --->   Operation 8 'alloca' 'i' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 9 [1/1] (0.00ns)   --->   "%m_V = alloca i32 1"   --->   Operation 9 'alloca' 'm_V' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 10 [1/1] (1.00ns)   --->   "%y_read = read i256 @_ssdm_op_Read.s_axilite.i256, i256 %y" [rsa.cpp:75]   --->   Operation 10 'read' 'y_read' <Predicate = true> <Delay = 1.00> <CoreInst = "s_axilite">   --->   Core 114 's_axilite' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write'>
ST_1 : Operation 11 [1/1] (1.00ns)   --->   "%N_read = read i256 @_ssdm_op_Read.s_axilite.i256, i256 %N" [rsa.cpp:75]   --->   Operation 11 'read' 'N_read' <Predicate = true> <Delay = 1.00> <CoreInst = "s_axilite">   --->   Core 114 's_axilite' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write'>
ST_1 : Operation 12 [1/1] (1.00ns)   --->   "%d_read = read i256 @_ssdm_op_Read.s_axilite.i256, i256 %d" [rsa.cpp:75]   --->   Operation 12 'read' 'd_read' <Predicate = true> <Delay = 1.00> <CoreInst = "s_axilite">   --->   Core 114 's_axilite' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write'>
ST_1 : Operation 13 [2/2] (1.58ns)   --->   "%t_V = call i256 @mod_product, i256 %y_read, i256 %N_read" [rsa.cpp:85]   --->   Operation 13 'call' 't_V' <Predicate = true> <Delay = 1.58> <CoreType = "Generic">   --->   Core 0 '' <Latency = 0> <II = 1> <Delay = 1.00> <Generic> <Opcode : >
ST_1 : Operation 14 [1/1] (1.58ns)   --->   "%store_ln88 = store i256 1, i256 %m_V" [rsa.cpp:88]   --->   Operation 14 'store' 'store_ln88' <Predicate = true> <Delay = 1.58>
ST_1 : Operation 15 [1/1] (1.58ns)   --->   "%store_ln88 = store i9 0, i9 %i" [rsa.cpp:88]   --->   Operation 15 'store' 'store_ln88' <Predicate = true> <Delay = 1.58>
ST_1 : Operation 16 [1/1] (1.58ns)   --->   "%store_ln88 = store i256 %d_read, i256 %d_V" [rsa.cpp:88]   --->   Operation 16 'store' 'store_ln88' <Predicate = true> <Delay = 1.58>

State 2 <SV = 1> <Delay = 1.58>
ST_2 : Operation 17 [1/1] (0.00ns)   --->   "%spectopmodule_ln75 = spectopmodule void @_ssdm_op_SpecTopModule, void @empty_8" [rsa.cpp:75]   --->   Operation 17 'spectopmodule' 'spectopmodule_ln75' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 18 [1/1] (0.00ns)   --->   "%specbitsmap_ln0 = specbitsmap void @_ssdm_op_SpecBitsMap, i256 %d"   --->   Operation 18 'specbitsmap' 'specbitsmap_ln0' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 19 [1/1] (0.00ns)   --->   "%specinterface_ln0 = specinterface void @_ssdm_op_SpecInterface, i256 %d, void @empty, i32 0, i32 0, void @empty_0, i32 0, i32 0, void @empty_1, void @empty_2, void @empty_0, i32 0, i32 0, i32 0, i32 0, void @empty_0, void @empty_0, i32 4294967295, i32 0"   --->   Operation 19 'specinterface' 'specinterface_ln0' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 20 [1/1] (0.00ns)   --->   "%specinterface_ln0 = specinterface void @_ssdm_op_SpecInterface, i256 %d, void @empty_3, i32 0, i32 0, void @empty_0, i32 0, i32 0, void @empty_0, void @empty_0, void @empty_0, i32 0, i32 0, i32 0, i32 0, void @empty_0, void @empty_0, i32 4294967295, i32 0"   --->   Operation 20 'specinterface' 'specinterface_ln0' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 21 [1/1] (0.00ns)   --->   "%specbitsmap_ln0 = specbitsmap void @_ssdm_op_SpecBitsMap, i256 %N"   --->   Operation 21 'specbitsmap' 'specbitsmap_ln0' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 22 [1/1] (0.00ns)   --->   "%specinterface_ln0 = specinterface void @_ssdm_op_SpecInterface, i256 %N, void @empty, i32 0, i32 0, void @empty_0, i32 0, i32 0, void @empty_1, void @empty_4, void @empty_0, i32 0, i32 0, i32 0, i32 0, void @empty_0, void @empty_0, i32 4294967295, i32 0"   --->   Operation 22 'specinterface' 'specinterface_ln0' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 23 [1/1] (0.00ns)   --->   "%specinterface_ln0 = specinterface void @_ssdm_op_SpecInterface, i256 %N, void @empty_3, i32 0, i32 0, void @empty_0, i32 0, i32 0, void @empty_0, void @empty_0, void @empty_0, i32 0, i32 0, i32 0, i32 0, void @empty_0, void @empty_0, i32 4294967295, i32 0"   --->   Operation 23 'specinterface' 'specinterface_ln0' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 24 [1/1] (0.00ns)   --->   "%specbitsmap_ln0 = specbitsmap void @_ssdm_op_SpecBitsMap, i256 %y"   --->   Operation 24 'specbitsmap' 'specbitsmap_ln0' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 25 [1/1] (0.00ns)   --->   "%specinterface_ln0 = specinterface void @_ssdm_op_SpecInterface, i256 %y, void @empty, i32 0, i32 0, void @empty_0, i32 0, i32 0, void @empty_1, void @empty_5, void @empty_0, i32 0, i32 0, i32 0, i32 0, void @empty_0, void @empty_0, i32 4294967295, i32 0"   --->   Operation 25 'specinterface' 'specinterface_ln0' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 26 [1/1] (0.00ns)   --->   "%specinterface_ln0 = specinterface void @_ssdm_op_SpecInterface, i256 %y, void @empty_3, i32 0, i32 0, void @empty_0, i32 0, i32 0, void @empty_0, void @empty_0, void @empty_0, i32 0, i32 0, i32 0, i32 0, void @empty_0, void @empty_0, i32 4294967295, i32 0"   --->   Operation 26 'specinterface' 'specinterface_ln0' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 27 [1/1] (0.00ns)   --->   "%specbitsmap_ln0 = specbitsmap void @_ssdm_op_SpecBitsMap, i256 %x"   --->   Operation 27 'specbitsmap' 'specbitsmap_ln0' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 28 [1/1] (0.00ns)   --->   "%specinterface_ln0 = specinterface void @_ssdm_op_SpecInterface, i256 %x, void @empty, i32 0, i32 0, void @empty_0, i32 0, i32 0, void @empty_1, void @empty_6, void @empty_0, i32 0, i32 0, i32 0, i32 0, void @empty_0, void @empty_0, i32 4294967295, i32 0"   --->   Operation 28 'specinterface' 'specinterface_ln0' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 29 [1/1] (0.00ns)   --->   "%specinterface_ln0 = specinterface void @_ssdm_op_SpecInterface, i256 %x, void @empty_3, i32 0, i32 0, void @empty_0, i32 0, i32 0, void @empty_0, void @empty_0, void @empty_0, i32 0, i32 0, i32 0, i32 0, void @empty_0, void @empty_0, i32 4294967295, i32 0"   --->   Operation 29 'specinterface' 'specinterface_ln0' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 30 [1/1] (0.00ns)   --->   "%specinterface_ln0 = specinterface void @_ssdm_op_SpecInterface, i32 0, void @empty, i32 0, i32 0, void @empty_0, i32 0, i32 0, void @empty_1, void @empty_0, void @empty_0, i32 0, i32 0, i32 0, i32 0, void @empty_0, void @empty_0, i32 4294967295, i32 0"   --->   Operation 30 'specinterface' 'specinterface_ln0' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 31 [1/2] (0.00ns)   --->   "%t_V = call i256 @mod_product, i256 %y_read, i256 %N_read" [rsa.cpp:85]   --->   Operation 31 'call' 't_V' <Predicate = true> <Delay = 0.00> <CoreType = "Generic">   --->   Core 0 '' <Latency = 0> <II = 1> <Delay = 1.00> <Generic> <Opcode : >
ST_2 : Operation 32 [1/1] (1.58ns)   --->   "%store_ln88 = store i256 %t_V, i256 %t_V_1" [rsa.cpp:88]   --->   Operation 32 'store' 'store_ln88' <Predicate = true> <Delay = 1.58>
ST_2 : Operation 33 [1/1] (0.00ns)   --->   "%br_ln88 = br void %for.body" [rsa.cpp:88]   --->   Operation 33 'br' 'br_ln88' <Predicate = true> <Delay = 0.00>

State 3 <SV = 2> <Delay = 5.10>
ST_3 : Operation 34 [1/1] (0.00ns)   --->   "%i_1 = load i9 %i" [rsa.cpp:88]   --->   Operation 34 'load' 'i_1' <Predicate = true> <Delay = 0.00>
ST_3 : Operation 35 [1/1] (1.66ns)   --->   "%icmp_ln88 = icmp_eq  i9 %i_1, i9 256" [rsa.cpp:88]   --->   Operation 35 'icmp' 'icmp_ln88' <Predicate = true> <Delay = 1.66> <CoreInst = "Cmp">   --->   Core 9 'Cmp' <Latency = 0> <II = 1> <Delay = 1.66> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>
ST_3 : Operation 36 [1/1] (0.00ns)   --->   "%empty = speclooptripcount i32 @_ssdm_op_SpecLoopTripCount, i64 256, i64 256, i64 256"   --->   Operation 36 'speclooptripcount' 'empty' <Predicate = true> <Delay = 0.00>
ST_3 : Operation 37 [1/1] (1.82ns)   --->   "%i_2 = add i9 %i_1, i9 1" [rsa.cpp:88]   --->   Operation 37 'add' 'i_2' <Predicate = true> <Delay = 1.82> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 1.82> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_3 : Operation 38 [1/1] (0.00ns)   --->   "%br_ln88 = br i1 %icmp_ln88, void %for.body.split, void %for.cond.cleanup" [rsa.cpp:88]   --->   Operation 38 'br' 'br_ln88' <Predicate = true> <Delay = 0.00>
ST_3 : Operation 39 [1/1] (0.00ns)   --->   "%d_V_load = load i256 %d_V"   --->   Operation 39 'load' 'd_V_load' <Predicate = (!icmp_ln88)> <Delay = 0.00>
ST_3 : Operation 40 [1/1] (0.00ns)   --->   "%specloopname_ln1633 = specloopname void @_ssdm_op_SpecLoopName, void @empty_9"   --->   Operation 40 'specloopname' 'specloopname_ln1633' <Predicate = (!icmp_ln88)> <Delay = 0.00>
ST_3 : Operation 41 [1/1] (0.00ns)   --->   "%trunc_ln1497 = trunc i256 %d_V_load"   --->   Operation 41 'trunc' 'trunc_ln1497' <Predicate = (!icmp_ln88)> <Delay = 0.00>
ST_3 : Operation 42 [1/1] (0.00ns)   --->   "%br_ln90 = br i1 %trunc_ln1497, void %for.inc, void %if.then" [rsa.cpp:90]   --->   Operation 42 'br' 'br_ln90' <Predicate = (!icmp_ln88)> <Delay = 0.00>
ST_3 : Operation 43 [1/1] (0.00ns)   --->   "%t_V_1_load = load i256 %t_V_1" [rsa.cpp:91]   --->   Operation 43 'load' 't_V_1_load' <Predicate = (!icmp_ln88 & trunc_ln1497)> <Delay = 0.00>
ST_3 : Operation 44 [1/1] (0.00ns)   --->   "%m_V_load_1 = load i256 %m_V" [rsa.cpp:91]   --->   Operation 44 'load' 'm_V_load_1' <Predicate = (!icmp_ln88 & trunc_ln1497)> <Delay = 0.00>
ST_3 : Operation 45 [2/2] (3.44ns)   --->   "%m_V_1 = call i256 @Montgomery, i256 %N_read, i256 %m_V_load_1, i256 %t_V_1_load" [rsa.cpp:91]   --->   Operation 45 'call' 'm_V_1' <Predicate = (!icmp_ln88 & trunc_ln1497)> <Delay = 3.44> <CoreType = "Generic">   --->   Core 0 '' <Latency = 0> <II = 1> <Delay = 1.00> <Generic> <Opcode : >
ST_3 : Operation 46 [1/1] (0.00ns)   --->   "%m_V_load = load i256 %m_V" [rsa.cpp:98]   --->   Operation 46 'load' 'm_V_load' <Predicate = (icmp_ln88)> <Delay = 0.00>
ST_3 : Operation 47 [1/1] (1.00ns)   --->   "%write_ln98 = write void @_ssdm_op_Write.s_axilite.i256P0A, i256 %x, i256 %m_V_load" [rsa.cpp:98]   --->   Operation 47 'write' 'write_ln98' <Predicate = (icmp_ln88)> <Delay = 1.00> <CoreInst = "s_axilite">   --->   Core 114 's_axilite' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write'>
ST_3 : Operation 48 [1/1] (0.00ns)   --->   "%ret_ln100 = ret" [rsa.cpp:100]   --->   Operation 48 'ret' 'ret_ln100' <Predicate = (icmp_ln88)> <Delay = 0.00>

State 4 <SV = 3> <Delay = 6.58>
ST_4 : Operation 49 [1/2] (4.99ns)   --->   "%m_V_1 = call i256 @Montgomery, i256 %N_read, i256 %m_V_load_1, i256 %t_V_1_load" [rsa.cpp:91]   --->   Operation 49 'call' 'm_V_1' <Predicate = (trunc_ln1497)> <Delay = 4.99> <CoreType = "Generic">   --->   Core 0 '' <Latency = 0> <II = 1> <Delay = 1.00> <Generic> <Opcode : >
ST_4 : Operation 50 [1/1] (1.58ns)   --->   "%store_ln92 = store i256 %m_V_1, i256 %m_V" [rsa.cpp:92]   --->   Operation 50 'store' 'store_ln92' <Predicate = (trunc_ln1497)> <Delay = 1.58>
ST_4 : Operation 51 [1/1] (0.00ns)   --->   "%br_ln92 = br void %for.inc" [rsa.cpp:92]   --->   Operation 51 'br' 'br_ln92' <Predicate = (trunc_ln1497)> <Delay = 0.00>
ST_4 : Operation 52 [1/1] (0.00ns)   --->   "%t_V_1_load_1 = load i256 %t_V_1" [rsa.cpp:93]   --->   Operation 52 'load' 't_V_1_load_1' <Predicate = true> <Delay = 0.00>
ST_4 : Operation 53 [2/2] (3.44ns)   --->   "%ref_tmp8 = call i256 @Montgomery, i256 %N_read, i256 %t_V_1_load_1, i256 %t_V_1_load_1" [rsa.cpp:93]   --->   Operation 53 'call' 'ref_tmp8' <Predicate = true> <Delay = 3.44> <CoreType = "Generic">   --->   Core 0 '' <Latency = 0> <II = 1> <Delay = 1.00> <Generic> <Opcode : >
ST_4 : Operation 54 [1/1] (1.58ns)   --->   "%store_ln88 = store i9 %i_2, i9 %i" [rsa.cpp:88]   --->   Operation 54 'store' 'store_ln88' <Predicate = true> <Delay = 1.58>

State 5 <SV = 4> <Delay = 6.58>
ST_5 : Operation 55 [1/1] (0.00ns)   --->   "%d_V_load_1 = load i256 %d_V"   --->   Operation 55 'load' 'd_V_load_1' <Predicate = true> <Delay = 0.00>
ST_5 : Operation 56 [1/2] (4.99ns)   --->   "%ref_tmp8 = call i256 @Montgomery, i256 %N_read, i256 %t_V_1_load_1, i256 %t_V_1_load_1" [rsa.cpp:93]   --->   Operation 56 'call' 'ref_tmp8' <Predicate = true> <Delay = 4.99> <CoreType = "Generic">   --->   Core 0 '' <Latency = 0> <II = 1> <Delay = 1.00> <Generic> <Opcode : >
ST_5 : Operation 57 [1/1] (0.00ns)   --->   "%r_V = partselect i255 @_ssdm_op_PartSelect.i255.i256.i32.i32, i256 %d_V_load_1, i32 1, i32 255"   --->   Operation 57 'partselect' 'r_V' <Predicate = true> <Delay = 0.00>
ST_5 : Operation 58 [1/1] (0.00ns)   --->   "%zext_ln1669 = zext i255 %r_V"   --->   Operation 58 'zext' 'zext_ln1669' <Predicate = true> <Delay = 0.00>
ST_5 : Operation 59 [1/1] (1.58ns)   --->   "%store_ln88 = store i256 %zext_ln1669, i256 %d_V" [rsa.cpp:88]   --->   Operation 59 'store' 'store_ln88' <Predicate = true> <Delay = 1.58>
ST_5 : Operation 60 [1/1] (1.58ns)   --->   "%store_ln88 = store i256 %ref_tmp8, i256 %t_V_1" [rsa.cpp:88]   --->   Operation 60 'store' 'store_ln88' <Predicate = true> <Delay = 1.58>
ST_5 : Operation 61 [1/1] (0.00ns)   --->   "%br_ln88 = br void %for.body" [rsa.cpp:88]   --->   Operation 61 'br' 'br_ln88' <Predicate = true> <Delay = 0.00>


============================================================
+ Verbose Summary: Timing violations
============================================================
Target clock period: 10ns, clock uncertainty: 2.7ns.

 <State 1>: 2.59ns
The critical path consists of the following:
	s_axi read operation ('y_read', rsa.cpp:75) on port 'y' (rsa.cpp:75) [23]  (1 ns)
	'call' operation ('t.V', rsa.cpp:85) to 'mod_product' [26]  (1.59 ns)

 <State 2>: 1.59ns
The critical path consists of the following:
	'call' operation ('t.V', rsa.cpp:85) to 'mod_product' [26]  (0 ns)
	'store' operation ('store_ln88', rsa.cpp:88) of variable 't.V', rsa.cpp:85 on local variable 't.V' [30]  (1.59 ns)

 <State 3>: 5.1ns
The critical path consists of the following:
	'load' operation ('t_V_1_load', rsa.cpp:91) on local variable 't.V' [44]  (0 ns)
	'call' operation ('m.V', rsa.cpp:91) to 'Montgomery' [46]  (3.44 ns)
	blocking operation 1.66 ns on control path)

 <State 4>: 6.58ns
The critical path consists of the following:
	'call' operation ('m.V', rsa.cpp:91) to 'Montgomery' [46]  (5 ns)
	'store' operation ('store_ln92', rsa.cpp:92) of variable 'm.V', rsa.cpp:91 on local variable 'm.V' [47]  (1.59 ns)

 <State 5>: 6.58ns
The critical path consists of the following:
	'call' operation ('ref_tmp8', rsa.cpp:93) to 'Montgomery' [52]  (5 ns)
	'store' operation ('store_ln88', rsa.cpp:88) of variable 'ref_tmp8', rsa.cpp:93 on local variable 't.V' [57]  (1.59 ns)


============================================================
+ Verbose Summary: Binding
============================================================
N/A
* FSMD analyzer results:
  - Output states:
 - Input state : 
  - Chain level:
	State 1
	State 2
	State 3
	State 4
	State 5


============================================================
+ Verbose Summary: Datapath Resource usage 
============================================================
N/A
