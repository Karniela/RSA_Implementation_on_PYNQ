-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
-- Version: 2022.2
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity rsa_Loop_VITIS_LOOP_93_1_proc is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    p_read : IN STD_LOGIC_VECTOR (15 downto 0);
    N_dout : IN STD_LOGIC_VECTOR (15 downto 0);
    N_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
    N_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
    N_empty_n : IN STD_LOGIC;
    N_read : OUT STD_LOGIC;
    d_dout : IN STD_LOGIC_VECTOR (15 downto 0);
    d_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
    d_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
    d_empty_n : IN STD_LOGIC;
    d_read : OUT STD_LOGIC;
    ap_return : OUT STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of rsa_Loop_VITIS_LOOP_93_1_proc is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv16_1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv15_0 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000000";

attribute shreg_extract : string;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal N_blk_n : STD_LOGIC;
    signal d_blk_n : STD_LOGIC;
    signal N_V_reg_514 : STD_LOGIC_VECTOR (15 downto 0);
    signal conv_i_i35_fu_163_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_i_i35_reg_520 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln93_fu_167_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal zext_ln93_reg_526 : STD_LOGIC_VECTOR (30 downto 0);
    signal a_V_3_reg_532 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal icmp_ln93_fu_200_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln93_reg_539 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_9_fu_206_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_9_reg_543 : STD_LOGIC_VECTOR (4 downto 0);
    signal trunc_ln8_fu_212_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln8_reg_548 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln1495_fu_216_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln1495_reg_552 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_7_fu_226_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal select_ln16_fu_282_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal icmp_ln10_fu_220_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln1669_fu_300_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln1495_1_fu_337_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln1495_1_reg_575 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_8_fu_346_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal select_ln16_1_fu_402_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal icmp_ln10_1_fu_340_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln1669_2_fu_420_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal empty_30_reg_98 : STD_LOGIC_VECTOR (15 downto 0);
    signal i_1_reg_107 : STD_LOGIC_VECTOR (4 downto 0);
    signal m_V_2_reg_118 : STD_LOGIC_VECTOR (30 downto 0);
    signal empty_28_reg_129 : STD_LOGIC_VECTOR (15 downto 0);
    signal i_3_reg_138 : STD_LOGIC_VECTOR (4 downto 0);
    signal m_V_9_reg_149 : STD_LOGIC_VECTOR (30 downto 0);
    signal i_fu_64 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln1019_fu_466_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal d_V_fu_68 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln1669_1_fu_462_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal m_V_fu_72 : STD_LOGIC_VECTOR (15 downto 0);
    signal m_V_15_fu_324_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal a_V_fu_76 : STD_LOGIC_VECTOR (15 downto 0);
    signal t_V_fu_444_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln10_fu_232_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln10_fu_241_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal m_V_16_fu_236_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal m_V_17_fu_245_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal m_V_18_fu_257_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln9_fu_253_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_fu_262_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_1_fu_272_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal r_V_1_fu_290_p4 : STD_LOGIC_VECTOR (14 downto 0);
    signal icmp_ln1031_fu_304_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln186_fu_315_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal xor_ln1031_fu_309_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln24_fu_319_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln10_1_fu_352_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln10_1_fu_361_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal m_V_19_fu_356_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal m_V_20_fu_365_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal m_V_21_fu_377_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln9_1_fu_373_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_fu_382_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_3_fu_392_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal r_V_fu_410_p4 : STD_LOGIC_VECTOR (14 downto 0);
    signal icmp_ln1031_1_fu_424_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln186_1_fu_435_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal xor_ln1031_1_fu_429_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln24_1_fu_439_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal r_V_2_fu_452_p4 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and ((icmp_ln93_reg_539 = ap_const_lv1_1) or ((icmp_ln1019_fu_466_p2 = ap_const_lv1_1) and (icmp_ln10_1_fu_340_p2 = ap_const_lv1_1))))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    a_V_fu_76_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_start = ap_const_logic_0) or (d_empty_n = ap_const_logic_0) or (ap_const_logic_0 = N_empty_n) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                a_V_fu_76 <= p_read;
            elsif (((icmp_ln93_reg_539 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln1019_fu_466_p2 = ap_const_lv1_0) and (icmp_ln10_1_fu_340_p2 = ap_const_lv1_1))) then 
                a_V_fu_76 <= t_V_fu_444_p3;
            end if; 
        end if;
    end process;

    d_V_fu_68_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_start = ap_const_logic_0) or (d_empty_n = ap_const_logic_0) or (ap_const_logic_0 = N_empty_n) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                d_V_fu_68 <= d_dout;
            elsif (((icmp_ln93_reg_539 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln1019_fu_466_p2 = ap_const_lv1_0) and (icmp_ln10_1_fu_340_p2 = ap_const_lv1_1))) then 
                d_V_fu_68 <= zext_ln1669_1_fu_462_p1;
            end if; 
        end if;
    end process;

    empty_28_reg_129_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln93_reg_539 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln10_1_fu_340_p2 = ap_const_lv1_0))) then 
                empty_28_reg_129 <= zext_ln1669_2_fu_420_p1;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state3) and ((icmp_ln10_fu_220_p2 = ap_const_lv1_1) or (trunc_ln8_reg_548 = ap_const_lv1_0)))) then 
                empty_28_reg_129 <= a_V_fu_76;
            end if; 
        end if;
    end process;

    empty_30_reg_98_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((trunc_ln8_fu_212_p1 = ap_const_lv1_1) and (icmp_ln93_fu_200_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                empty_30_reg_98 <= m_V_fu_72;
            elsif (((icmp_ln10_fu_220_p2 = ap_const_lv1_0) and (trunc_ln8_reg_548 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                empty_30_reg_98 <= zext_ln1669_fu_300_p1;
            end if; 
        end if;
    end process;

    i_1_reg_107_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((trunc_ln8_fu_212_p1 = ap_const_lv1_1) and (icmp_ln93_fu_200_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                i_1_reg_107 <= ap_const_lv5_0;
            elsif (((icmp_ln10_fu_220_p2 = ap_const_lv1_0) and (trunc_ln8_reg_548 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                i_1_reg_107 <= i_7_fu_226_p2;
            end if; 
        end if;
    end process;

    i_3_reg_138_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln93_reg_539 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln10_1_fu_340_p2 = ap_const_lv1_0))) then 
                i_3_reg_138 <= i_8_fu_346_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state3) and ((icmp_ln10_fu_220_p2 = ap_const_lv1_1) or (trunc_ln8_reg_548 = ap_const_lv1_0)))) then 
                i_3_reg_138 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    i_fu_64_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_start = ap_const_logic_0) or (d_empty_n = ap_const_logic_0) or (ap_const_logic_0 = N_empty_n) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_fu_64 <= ap_const_lv5_0;
            elsif (((icmp_ln93_reg_539 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln1019_fu_466_p2 = ap_const_lv1_0) and (icmp_ln10_1_fu_340_p2 = ap_const_lv1_1))) then 
                i_fu_64 <= i_9_reg_543;
            end if; 
        end if;
    end process;

    m_V_2_reg_118_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((trunc_ln8_fu_212_p1 = ap_const_lv1_1) and (icmp_ln93_fu_200_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                m_V_2_reg_118 <= ap_const_lv31_0;
            elsif (((icmp_ln10_fu_220_p2 = ap_const_lv1_0) and (trunc_ln8_reg_548 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                m_V_2_reg_118 <= select_ln16_fu_282_p3;
            end if; 
        end if;
    end process;

    m_V_9_reg_149_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln93_reg_539 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln10_1_fu_340_p2 = ap_const_lv1_0))) then 
                m_V_9_reg_149 <= select_ln16_1_fu_402_p3;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state3) and ((icmp_ln10_fu_220_p2 = ap_const_lv1_1) or (trunc_ln8_reg_548 = ap_const_lv1_0)))) then 
                m_V_9_reg_149 <= ap_const_lv31_0;
            end if; 
        end if;
    end process;

    m_V_fu_72_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_start = ap_const_logic_0) or (d_empty_n = ap_const_logic_0) or (ap_const_logic_0 = N_empty_n) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                m_V_fu_72 <= ap_const_lv16_1;
            elsif (((icmp_ln10_fu_220_p2 = ap_const_lv1_1) and (trunc_ln8_reg_548 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                m_V_fu_72 <= m_V_15_fu_324_p3;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                N_V_reg_514 <= N_dout;
                    conv_i_i35_reg_520(15 downto 0) <= conv_i_i35_fu_163_p1(15 downto 0);
                    zext_ln93_reg_526(15 downto 0) <= zext_ln93_fu_167_p1(15 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                a_V_3_reg_532 <= m_V_fu_72;
                i_9_reg_543 <= i_9_fu_206_p2;
                icmp_ln93_reg_539 <= icmp_ln93_fu_200_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln93_fu_200_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                trunc_ln8_reg_548 <= trunc_ln8_fu_212_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and ((icmp_ln10_fu_220_p2 = ap_const_lv1_1) or (trunc_ln8_reg_548 = ap_const_lv1_0)))) then
                    zext_ln1495_1_reg_575(15 downto 0) <= zext_ln1495_1_fu_337_p1(15 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((trunc_ln8_fu_212_p1 = ap_const_lv1_1) and (icmp_ln93_fu_200_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    zext_ln1495_reg_552(15 downto 0) <= zext_ln1495_fu_216_p1(15 downto 0);
            end if;
        end if;
    end process;
    conv_i_i35_reg_520(31 downto 16) <= "0000000000000000";
    zext_ln93_reg_526(30 downto 16) <= "000000000000000";
    zext_ln1495_reg_552(31 downto 16) <= "0000000000000000";
    zext_ln1495_1_reg_575(31 downto 16) <= "0000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, N_empty_n, d_empty_n, ap_CS_fsm_state2, icmp_ln93_fu_200_p2, icmp_ln93_reg_539, trunc_ln8_reg_548, ap_CS_fsm_state3, icmp_ln10_fu_220_p2, ap_CS_fsm_state4, icmp_ln10_1_fu_340_p2, icmp_ln1019_fu_466_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_start = ap_const_logic_0) or (d_empty_n = ap_const_logic_0) or (ap_const_logic_0 = N_empty_n) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln93_fu_200_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and ((icmp_ln10_fu_220_p2 = ap_const_lv1_1) or (trunc_ln8_reg_548 = ap_const_lv1_0)))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and ((icmp_ln93_reg_539 = ap_const_lv1_1) or ((icmp_ln1019_fu_466_p2 = ap_const_lv1_1) and (icmp_ln10_1_fu_340_p2 = ap_const_lv1_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                elsif (((icmp_ln93_reg_539 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln1019_fu_466_p2 = ap_const_lv1_0) and (icmp_ln10_1_fu_340_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;

    N_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, N_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            N_blk_n <= N_empty_n;
        else 
            N_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    N_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, N_empty_n, d_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (d_empty_n = ap_const_logic_0) or (ap_const_logic_0 = N_empty_n) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            N_read <= ap_const_logic_1;
        else 
            N_read <= ap_const_logic_0;
        end if; 
    end process;

    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start, ap_done_reg, N_empty_n, d_empty_n)
    begin
        if (((ap_start = ap_const_logic_0) or (d_empty_n = ap_const_logic_0) or (ap_const_logic_0 = N_empty_n) or (ap_done_reg = ap_const_logic_1))) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state2_blk <= ap_const_logic_0;
    ap_ST_fsm_state3_blk <= ap_const_logic_0;
    ap_ST_fsm_state4_blk <= ap_const_logic_0;

    ap_block_state1_assign_proc : process(ap_start, ap_done_reg, N_empty_n, d_empty_n)
    begin
                ap_block_state1 <= ((ap_start = ap_const_logic_0) or (d_empty_n = ap_const_logic_0) or (ap_const_logic_0 = N_empty_n) or (ap_done_reg = ap_const_logic_1));
    end process;


    ap_done_assign_proc : process(ap_done_reg, icmp_ln93_reg_539, ap_CS_fsm_state4, icmp_ln10_1_fu_340_p2, icmp_ln1019_fu_466_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) and ((icmp_ln93_reg_539 = ap_const_lv1_1) or ((icmp_ln1019_fu_466_p2 = ap_const_lv1_1) and (icmp_ln10_1_fu_340_p2 = ap_const_lv1_1))))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(icmp_ln93_reg_539, ap_CS_fsm_state4, icmp_ln10_1_fu_340_p2, icmp_ln1019_fu_466_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) and ((icmp_ln93_reg_539 = ap_const_lv1_1) or ((icmp_ln1019_fu_466_p2 = ap_const_lv1_1) and (icmp_ln10_1_fu_340_p2 = ap_const_lv1_1))))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_return <= a_V_3_reg_532;
    conv_i_i35_fu_163_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(N_dout),32));

    d_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, d_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            d_blk_n <= d_empty_n;
        else 
            d_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    d_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, N_empty_n, d_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (d_empty_n = ap_const_logic_0) or (ap_const_logic_0 = N_empty_n) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            d_read <= ap_const_logic_1;
        else 
            d_read <= ap_const_logic_0;
        end if; 
    end process;

    i_7_fu_226_p2 <= std_logic_vector(unsigned(i_1_reg_107) + unsigned(ap_const_lv5_1));
    i_8_fu_346_p2 <= std_logic_vector(unsigned(i_3_reg_138) + unsigned(ap_const_lv5_1));
    i_9_fu_206_p2 <= std_logic_vector(unsigned(i_fu_64) + unsigned(ap_const_lv5_1));
    icmp_ln1019_fu_466_p2 <= "1" when (r_V_2_fu_452_p4 = ap_const_lv15_0) else "0";
    icmp_ln1031_1_fu_424_p2 <= "1" when (unsigned(m_V_9_reg_149) < unsigned(zext_ln93_reg_526)) else "0";
    icmp_ln1031_fu_304_p2 <= "1" when (unsigned(m_V_2_reg_118) < unsigned(zext_ln93_reg_526)) else "0";
    icmp_ln10_1_fu_340_p2 <= "1" when (i_3_reg_138 = ap_const_lv5_10) else "0";
    icmp_ln10_fu_220_p2 <= "1" when (i_1_reg_107 = ap_const_lv5_10) else "0";
    icmp_ln93_fu_200_p2 <= "1" when (i_fu_64 = ap_const_lv5_10) else "0";
    m_V_15_fu_324_p3 <= 
        sub_ln24_fu_319_p2 when (xor_ln1031_fu_309_p2(0) = '1') else 
        trunc_ln186_fu_315_p1;
    m_V_16_fu_236_p2 <= std_logic_vector(unsigned(zext_ln10_fu_232_p1) + unsigned(zext_ln1495_reg_552));
    m_V_17_fu_245_p3 <= 
        m_V_16_fu_236_p2 when (trunc_ln10_fu_241_p1(0) = '1') else 
        zext_ln10_fu_232_p1;
    m_V_18_fu_257_p2 <= std_logic_vector(unsigned(m_V_17_fu_245_p3) + unsigned(conv_i_i35_reg_520));
    m_V_19_fu_356_p2 <= std_logic_vector(unsigned(zext_ln10_1_fu_352_p1) + unsigned(zext_ln1495_1_reg_575));
    m_V_20_fu_365_p3 <= 
        m_V_19_fu_356_p2 when (trunc_ln10_1_fu_361_p1(0) = '1') else 
        zext_ln10_1_fu_352_p1;
    m_V_21_fu_377_p2 <= std_logic_vector(unsigned(m_V_20_fu_365_p3) + unsigned(conv_i_i35_reg_520));
    r_V_1_fu_290_p4 <= empty_30_reg_98(15 downto 1);
    r_V_2_fu_452_p4 <= d_V_fu_68(15 downto 1);
    r_V_fu_410_p4 <= empty_28_reg_129(15 downto 1);
    select_ln16_1_fu_402_p3 <= 
        tmp_2_fu_382_p4 when (trunc_ln9_1_fu_373_p1(0) = '1') else 
        tmp_3_fu_392_p4;
    select_ln16_fu_282_p3 <= 
        tmp_fu_262_p4 when (trunc_ln9_fu_253_p1(0) = '1') else 
        tmp_1_fu_272_p4;
    sub_ln24_1_fu_439_p2 <= std_logic_vector(unsigned(trunc_ln186_1_fu_435_p1) - unsigned(N_V_reg_514));
    sub_ln24_fu_319_p2 <= std_logic_vector(unsigned(trunc_ln186_fu_315_p1) - unsigned(N_V_reg_514));
    t_V_fu_444_p3 <= 
        sub_ln24_1_fu_439_p2 when (xor_ln1031_1_fu_429_p2(0) = '1') else 
        trunc_ln186_1_fu_435_p1;
    tmp_1_fu_272_p4 <= m_V_17_fu_245_p3(31 downto 1);
    tmp_2_fu_382_p4 <= m_V_21_fu_377_p2(31 downto 1);
    tmp_3_fu_392_p4 <= m_V_20_fu_365_p3(31 downto 1);
    tmp_fu_262_p4 <= m_V_18_fu_257_p2(31 downto 1);
    trunc_ln10_1_fu_361_p1 <= empty_28_reg_129(1 - 1 downto 0);
    trunc_ln10_fu_241_p1 <= empty_30_reg_98(1 - 1 downto 0);
    trunc_ln186_1_fu_435_p1 <= m_V_9_reg_149(16 - 1 downto 0);
    trunc_ln186_fu_315_p1 <= m_V_2_reg_118(16 - 1 downto 0);
    trunc_ln8_fu_212_p1 <= d_V_fu_68(1 - 1 downto 0);
    trunc_ln9_1_fu_373_p1 <= m_V_20_fu_365_p3(1 - 1 downto 0);
    trunc_ln9_fu_253_p1 <= m_V_17_fu_245_p3(1 - 1 downto 0);
    xor_ln1031_1_fu_429_p2 <= (icmp_ln1031_1_fu_424_p2 xor ap_const_lv1_1);
    xor_ln1031_fu_309_p2 <= (icmp_ln1031_fu_304_p2 xor ap_const_lv1_1);
    zext_ln10_1_fu_352_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(m_V_9_reg_149),32));
    zext_ln10_fu_232_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(m_V_2_reg_118),32));
    zext_ln1495_1_fu_337_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(a_V_fu_76),32));
    zext_ln1495_fu_216_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(a_V_fu_76),32));
    zext_ln1669_1_fu_462_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(r_V_2_fu_452_p4),16));
    zext_ln1669_2_fu_420_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(r_V_fu_410_p4),16));
    zext_ln1669_fu_300_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(r_V_1_fu_290_p4),16));
    zext_ln93_fu_167_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(N_dout),31));
end behav;
