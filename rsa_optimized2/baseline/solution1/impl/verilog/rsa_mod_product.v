// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
// Version: 2022.2
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module rsa_mod_product (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        b,
        N,
        N_c_din,
        N_c_num_data_valid,
        N_c_fifo_cap,
        N_c_full_n,
        N_c_write,
        ap_return
);

parameter    ap_ST_fsm_state1 = 2'd1;
parameter    ap_ST_fsm_state2 = 2'd2;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [15:0] b;
input  [15:0] N;
output  [15:0] N_c_din;
input  [1:0] N_c_num_data_valid;
input  [1:0] N_c_fifo_cap;
input   N_c_full_n;
output   N_c_write;
output  [15:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg N_c_write;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    N_c_blk_n;
wire   [17:0] zext_ln186_2_fu_109_p1;
reg   [17:0] zext_ln186_2_reg_323;
wire   [16:0] zext_ln186_fu_113_p1;
reg   [16:0] zext_ln186_reg_329;
reg   [16:0] ap_phi_mux_phi_ln1495_phi_fu_99_p4;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln36_fu_144_p2;
wire   [16:0] m_V_9_fu_210_p3;
wire   [0:0] icmp_ln1019_fu_265_p2;
reg   [16:0] t_V_fu_60;
wire   [16:0] t_V_3_fu_243_p3;
wire   [16:0] zext_ln186_1_fu_105_p1;
reg    ap_block_state1;
reg   [4:0] i_1_fu_64;
wire   [4:0] i_2_fu_150_p2;
reg   [16:0] conv3_i5_fu_68;
wire   [16:0] zext_ln1669_fu_261_p1;
reg   [16:0] m_V_fu_72;
wire   [17:0] zext_ln1495_fu_162_p1;
wire   [17:0] zext_ln1495_1_fu_166_p1;
wire   [17:0] ret_V_fu_170_p2;
wire   [16:0] m_V_6_fu_181_p2;
wire   [0:0] trunc_ln36_fu_192_p1;
wire   [0:0] icmp_ln1031_fu_176_p2;
wire   [0:0] and_ln1031_fu_196_p2;
wire   [16:0] m_V_7_fu_187_p2;
wire   [16:0] m_V_8_fu_202_p3;
wire   [17:0] ret_V_1_fu_219_p3;
wire   [16:0] t_V_1_fu_232_p2;
wire   [0:0] icmp_ln1035_fu_227_p2;
wire   [16:0] t_V_2_fu_238_p2;
wire   [15:0] r_V_fu_251_p4;
reg   [1:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 2'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state2) & ((icmp_ln1019_fu_265_p2 == 1'd1) | (icmp_ln36_fu_144_p2 == 1'd1)))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_start == 1'b0) | (1'b0 == N_c_full_n) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        conv3_i5_fu_68 <= 17'd65536;
    end else if (((icmp_ln1019_fu_265_p2 == 1'd0) & (icmp_ln36_fu_144_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        conv3_i5_fu_68 <= zext_ln1669_fu_261_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_start == 1'b0) | (1'b0 == N_c_full_n) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        i_1_fu_64 <= 5'd0;
    end else if (((icmp_ln1019_fu_265_p2 == 1'd0) & (icmp_ln36_fu_144_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        i_1_fu_64 <= i_2_fu_150_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_start == 1'b0) | (1'b0 == N_c_full_n) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        m_V_fu_72 <= 17'd0;
    end else if (((icmp_ln1019_fu_265_p2 == 1'd0) & (icmp_ln36_fu_144_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        m_V_fu_72 <= m_V_9_fu_210_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_start == 1'b0) | (1'b0 == N_c_full_n) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        t_V_fu_60 <= zext_ln186_1_fu_105_p1;
    end else if (((icmp_ln1019_fu_265_p2 == 1'd0) & (icmp_ln36_fu_144_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        t_V_fu_60 <= t_V_3_fu_243_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        zext_ln186_2_reg_323[15 : 0] <= zext_ln186_2_fu_109_p1[15 : 0];
        zext_ln186_reg_329[15 : 0] <= zext_ln186_fu_113_p1[15 : 0];
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        N_c_blk_n = N_c_full_n;
    end else begin
        N_c_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (1'b0 == N_c_full_n) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        N_c_write = 1'b1;
    end else begin
        N_c_write = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) | (1'b0 == N_c_full_n) | (ap_done_reg == 1'b1))) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & ((icmp_ln1019_fu_265_p2 == 1'd1) | (icmp_ln36_fu_144_p2 == 1'd1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        if (((icmp_ln1019_fu_265_p2 == 1'd1) & (icmp_ln36_fu_144_p2 == 1'd0))) begin
            ap_phi_mux_phi_ln1495_phi_fu_99_p4 = m_V_9_fu_210_p3;
        end else if ((icmp_ln36_fu_144_p2 == 1'd1)) begin
            ap_phi_mux_phi_ln1495_phi_fu_99_p4 = m_V_fu_72;
        end else begin
            ap_phi_mux_phi_ln1495_phi_fu_99_p4 = 'bx;
        end
    end else begin
        ap_phi_mux_phi_ln1495_phi_fu_99_p4 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & ((icmp_ln1019_fu_265_p2 == 1'd1) | (icmp_ln36_fu_144_p2 == 1'd1)))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_start == 1'b0) | (1'b0 == N_c_full_n) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & ((icmp_ln1019_fu_265_p2 == 1'd1) | (icmp_ln36_fu_144_p2 == 1'd1)))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign N_c_din = N;

assign and_ln1031_fu_196_p2 = (trunc_ln36_fu_192_p1 & icmp_ln1031_fu_176_p2);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | (1'b0 == N_c_full_n) | (ap_done_reg == 1'b1));
end

assign ap_return = ap_phi_mux_phi_ln1495_phi_fu_99_p4[15:0];

assign i_2_fu_150_p2 = (i_1_fu_64 + 5'd1);

assign icmp_ln1019_fu_265_p2 = ((r_V_fu_251_p4 == 16'd0) ? 1'b1 : 1'b0);

assign icmp_ln1031_fu_176_p2 = ((ret_V_fu_170_p2 < zext_ln186_2_reg_323) ? 1'b1 : 1'b0);

assign icmp_ln1035_fu_227_p2 = ((ret_V_1_fu_219_p3 > zext_ln186_2_reg_323) ? 1'b1 : 1'b0);

assign icmp_ln36_fu_144_p2 = ((i_1_fu_64 == 5'd17) ? 1'b1 : 1'b0);

assign m_V_6_fu_181_p2 = (m_V_fu_72 + t_V_fu_60);

assign m_V_7_fu_187_p2 = (m_V_6_fu_181_p2 - zext_ln186_reg_329);

assign m_V_8_fu_202_p3 = ((and_ln1031_fu_196_p2[0:0] == 1'b1) ? m_V_6_fu_181_p2 : m_V_7_fu_187_p2);

assign m_V_9_fu_210_p3 = ((trunc_ln36_fu_192_p1[0:0] == 1'b1) ? m_V_8_fu_202_p3 : m_V_fu_72);

assign r_V_fu_251_p4 = {{conv3_i5_fu_68[16:1]}};

assign ret_V_1_fu_219_p3 = {{t_V_fu_60}, {1'd0}};

assign ret_V_fu_170_p2 = (zext_ln1495_fu_162_p1 + zext_ln1495_1_fu_166_p1);

assign t_V_1_fu_232_p2 = t_V_fu_60 << 17'd1;

assign t_V_2_fu_238_p2 = (t_V_1_fu_232_p2 - zext_ln186_reg_329);

assign t_V_3_fu_243_p3 = ((icmp_ln1035_fu_227_p2[0:0] == 1'b1) ? t_V_2_fu_238_p2 : t_V_1_fu_232_p2);

assign trunc_ln36_fu_192_p1 = conv3_i5_fu_68[0:0];

assign zext_ln1495_1_fu_166_p1 = t_V_fu_60;

assign zext_ln1495_fu_162_p1 = m_V_fu_72;

assign zext_ln1669_fu_261_p1 = r_V_fu_251_p4;

assign zext_ln186_1_fu_105_p1 = b;

assign zext_ln186_2_fu_109_p1 = N;

assign zext_ln186_fu_113_p1 = N;

always @ (posedge ap_clk) begin
    zext_ln186_2_reg_323[17:16] <= 2'b00;
    zext_ln186_reg_329[16] <= 1'b0;
end

endmodule //rsa_mod_product
