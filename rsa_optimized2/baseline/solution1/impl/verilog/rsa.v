// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
// Version: 2022.2
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="rsa_rsa,hls_ip_2022_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=dataflow,HLS_SYN_CLOCK=7.107187,HLS_SYN_LAT=220,HLS_SYN_TPT=220,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=898,HLS_SYN_LUT=1428,HLS_VERSION=2022_2}" *)

module rsa (
        s_axi_control_AWVALID,
        s_axi_control_AWREADY,
        s_axi_control_AWADDR,
        s_axi_control_WVALID,
        s_axi_control_WREADY,
        s_axi_control_WDATA,
        s_axi_control_WSTRB,
        s_axi_control_ARVALID,
        s_axi_control_ARREADY,
        s_axi_control_ARADDR,
        s_axi_control_RVALID,
        s_axi_control_RREADY,
        s_axi_control_RDATA,
        s_axi_control_RRESP,
        s_axi_control_BVALID,
        s_axi_control_BREADY,
        s_axi_control_BRESP,
        ap_clk,
        ap_rst_n,
        interrupt
);

parameter    C_S_AXI_CONTROL_DATA_WIDTH = 32;
parameter    C_S_AXI_CONTROL_ADDR_WIDTH = 6;
parameter    C_S_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_CONTROL_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);

input   s_axi_control_AWVALID;
output   s_axi_control_AWREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_AWADDR;
input   s_axi_control_WVALID;
output   s_axi_control_WREADY;
input  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_WDATA;
input  [C_S_AXI_CONTROL_WSTRB_WIDTH - 1:0] s_axi_control_WSTRB;
input   s_axi_control_ARVALID;
output   s_axi_control_ARREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_ARADDR;
output   s_axi_control_RVALID;
input   s_axi_control_RREADY;
output  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_RDATA;
output  [1:0] s_axi_control_RRESP;
output   s_axi_control_BVALID;
input   s_axi_control_BREADY;
output  [1:0] s_axi_control_BRESP;
input   ap_clk;
input   ap_rst_n;
output   interrupt;

 reg    ap_rst_n_inv;
wire   [15:0] d;
wire   [15:0] N;
wire   [15:0] y;
wire    ap_start;
wire    ap_ready;
wire    ap_done;
wire    ap_idle;
wire    entry_proc_U0_ap_start;
wire    entry_proc_U0_ap_done;
wire    entry_proc_U0_ap_continue;
wire    entry_proc_U0_ap_idle;
wire    entry_proc_U0_ap_ready;
wire   [15:0] entry_proc_U0_d_c_din;
wire    entry_proc_U0_d_c_write;
wire    mod_product_U0_ap_start;
wire    mod_product_U0_ap_done;
wire    mod_product_U0_ap_continue;
wire    mod_product_U0_ap_idle;
wire    mod_product_U0_ap_ready;
wire   [15:0] mod_product_U0_N_c_din;
wire    mod_product_U0_N_c_write;
wire   [15:0] mod_product_U0_ap_return;
wire    t_V_full_n;
wire    Loop_VITIS_LOOP_93_1_proc_U0_ap_start;
wire    Loop_VITIS_LOOP_93_1_proc_U0_ap_done;
wire    Loop_VITIS_LOOP_93_1_proc_U0_ap_continue;
wire    Loop_VITIS_LOOP_93_1_proc_U0_ap_idle;
wire    Loop_VITIS_LOOP_93_1_proc_U0_ap_ready;
wire    Loop_VITIS_LOOP_93_1_proc_U0_N_read;
wire    Loop_VITIS_LOOP_93_1_proc_U0_d_read;
wire   [15:0] Loop_VITIS_LOOP_93_1_proc_U0_ap_return;
wire    a_V_1_loc_channel_full_n;
wire    Block_for_end_proc_U0_ap_start;
wire    Block_for_end_proc_U0_ap_done;
wire    Block_for_end_proc_U0_ap_continue;
wire    Block_for_end_proc_U0_ap_idle;
wire    Block_for_end_proc_U0_ap_ready;
wire   [15:0] Block_for_end_proc_U0_x;
wire    Block_for_end_proc_U0_x_ap_vld;
wire    d_c_full_n;
wire   [15:0] d_c_dout;
wire   [2:0] d_c_num_data_valid;
wire   [2:0] d_c_fifo_cap;
wire    d_c_empty_n;
wire    N_c_full_n;
wire   [15:0] N_c_dout;
wire   [1:0] N_c_num_data_valid;
wire   [1:0] N_c_fifo_cap;
wire    N_c_empty_n;
wire   [15:0] t_V_dout;
wire   [1:0] t_V_num_data_valid;
wire   [1:0] t_V_fifo_cap;
wire    t_V_empty_n;
wire   [15:0] a_V_1_loc_channel_dout;
wire   [1:0] a_V_1_loc_channel_num_data_valid;
wire   [1:0] a_V_1_loc_channel_fifo_cap;
wire    a_V_1_loc_channel_empty_n;
wire    ap_sync_ready;
reg    ap_sync_reg_entry_proc_U0_ap_ready;
wire    ap_sync_entry_proc_U0_ap_ready;
reg    ap_sync_reg_mod_product_U0_ap_ready;
wire    ap_sync_mod_product_U0_ap_ready;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_sync_reg_entry_proc_U0_ap_ready = 1'b0;
#0 ap_sync_reg_mod_product_U0_ap_ready = 1'b0;
end

rsa_control_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CONTROL_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CONTROL_DATA_WIDTH ))
control_s_axi_U(
    .AWVALID(s_axi_control_AWVALID),
    .AWREADY(s_axi_control_AWREADY),
    .AWADDR(s_axi_control_AWADDR),
    .WVALID(s_axi_control_WVALID),
    .WREADY(s_axi_control_WREADY),
    .WDATA(s_axi_control_WDATA),
    .WSTRB(s_axi_control_WSTRB),
    .ARVALID(s_axi_control_ARVALID),
    .ARREADY(s_axi_control_ARREADY),
    .ARADDR(s_axi_control_ARADDR),
    .RVALID(s_axi_control_RVALID),
    .RREADY(s_axi_control_RREADY),
    .RDATA(s_axi_control_RDATA),
    .RRESP(s_axi_control_RRESP),
    .BVALID(s_axi_control_BVALID),
    .BREADY(s_axi_control_BREADY),
    .BRESP(s_axi_control_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .d(d),
    .N(N),
    .y(y),
    .x(Block_for_end_proc_U0_x),
    .x_ap_vld(Block_for_end_proc_U0_x_ap_vld),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle)
);

rsa_entry_proc entry_proc_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(entry_proc_U0_ap_start),
    .ap_done(entry_proc_U0_ap_done),
    .ap_continue(entry_proc_U0_ap_continue),
    .ap_idle(entry_proc_U0_ap_idle),
    .ap_ready(entry_proc_U0_ap_ready),
    .d(d),
    .d_c_din(entry_proc_U0_d_c_din),
    .d_c_num_data_valid(d_c_num_data_valid),
    .d_c_fifo_cap(d_c_fifo_cap),
    .d_c_full_n(d_c_full_n),
    .d_c_write(entry_proc_U0_d_c_write)
);

rsa_mod_product mod_product_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(mod_product_U0_ap_start),
    .ap_done(mod_product_U0_ap_done),
    .ap_continue(mod_product_U0_ap_continue),
    .ap_idle(mod_product_U0_ap_idle),
    .ap_ready(mod_product_U0_ap_ready),
    .b(y),
    .N(N),
    .N_c_din(mod_product_U0_N_c_din),
    .N_c_num_data_valid(N_c_num_data_valid),
    .N_c_fifo_cap(N_c_fifo_cap),
    .N_c_full_n(N_c_full_n),
    .N_c_write(mod_product_U0_N_c_write),
    .ap_return(mod_product_U0_ap_return)
);

rsa_Loop_VITIS_LOOP_93_1_proc Loop_VITIS_LOOP_93_1_proc_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(Loop_VITIS_LOOP_93_1_proc_U0_ap_start),
    .ap_done(Loop_VITIS_LOOP_93_1_proc_U0_ap_done),
    .ap_continue(Loop_VITIS_LOOP_93_1_proc_U0_ap_continue),
    .ap_idle(Loop_VITIS_LOOP_93_1_proc_U0_ap_idle),
    .ap_ready(Loop_VITIS_LOOP_93_1_proc_U0_ap_ready),
    .p_read(t_V_dout),
    .N_dout(N_c_dout),
    .N_num_data_valid(N_c_num_data_valid),
    .N_fifo_cap(N_c_fifo_cap),
    .N_empty_n(N_c_empty_n),
    .N_read(Loop_VITIS_LOOP_93_1_proc_U0_N_read),
    .d_dout(d_c_dout),
    .d_num_data_valid(d_c_num_data_valid),
    .d_fifo_cap(d_c_fifo_cap),
    .d_empty_n(d_c_empty_n),
    .d_read(Loop_VITIS_LOOP_93_1_proc_U0_d_read),
    .ap_return(Loop_VITIS_LOOP_93_1_proc_U0_ap_return)
);

rsa_Block_for_end_proc Block_for_end_proc_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(Block_for_end_proc_U0_ap_start),
    .ap_done(Block_for_end_proc_U0_ap_done),
    .ap_continue(Block_for_end_proc_U0_ap_continue),
    .ap_idle(Block_for_end_proc_U0_ap_idle),
    .ap_ready(Block_for_end_proc_U0_ap_ready),
    .p_read(a_V_1_loc_channel_dout),
    .x(Block_for_end_proc_U0_x),
    .x_ap_vld(Block_for_end_proc_U0_x_ap_vld)
);

rsa_fifo_w16_d3_S d_c_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(entry_proc_U0_d_c_din),
    .if_full_n(d_c_full_n),
    .if_write(entry_proc_U0_d_c_write),
    .if_dout(d_c_dout),
    .if_num_data_valid(d_c_num_data_valid),
    .if_fifo_cap(d_c_fifo_cap),
    .if_empty_n(d_c_empty_n),
    .if_read(Loop_VITIS_LOOP_93_1_proc_U0_d_read)
);

rsa_fifo_w16_d2_S N_c_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(mod_product_U0_N_c_din),
    .if_full_n(N_c_full_n),
    .if_write(mod_product_U0_N_c_write),
    .if_dout(N_c_dout),
    .if_num_data_valid(N_c_num_data_valid),
    .if_fifo_cap(N_c_fifo_cap),
    .if_empty_n(N_c_empty_n),
    .if_read(Loop_VITIS_LOOP_93_1_proc_U0_N_read)
);

rsa_fifo_w16_d2_S t_V_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(mod_product_U0_ap_return),
    .if_full_n(t_V_full_n),
    .if_write(mod_product_U0_ap_done),
    .if_dout(t_V_dout),
    .if_num_data_valid(t_V_num_data_valid),
    .if_fifo_cap(t_V_fifo_cap),
    .if_empty_n(t_V_empty_n),
    .if_read(Loop_VITIS_LOOP_93_1_proc_U0_ap_ready)
);

rsa_fifo_w16_d2_S a_V_1_loc_channel_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(Loop_VITIS_LOOP_93_1_proc_U0_ap_return),
    .if_full_n(a_V_1_loc_channel_full_n),
    .if_write(Loop_VITIS_LOOP_93_1_proc_U0_ap_done),
    .if_dout(a_V_1_loc_channel_dout),
    .if_num_data_valid(a_V_1_loc_channel_num_data_valid),
    .if_fifo_cap(a_V_1_loc_channel_fifo_cap),
    .if_empty_n(a_V_1_loc_channel_empty_n),
    .if_read(Block_for_end_proc_U0_ap_ready)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_sync_reg_entry_proc_U0_ap_ready <= 1'b0;
    end else begin
        if (((ap_sync_ready & ap_start) == 1'b1)) begin
            ap_sync_reg_entry_proc_U0_ap_ready <= 1'b0;
        end else begin
            ap_sync_reg_entry_proc_U0_ap_ready <= ap_sync_entry_proc_U0_ap_ready;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_sync_reg_mod_product_U0_ap_ready <= 1'b0;
    end else begin
        if (((ap_sync_ready & ap_start) == 1'b1)) begin
            ap_sync_reg_mod_product_U0_ap_ready <= 1'b0;
        end else begin
            ap_sync_reg_mod_product_U0_ap_ready <= ap_sync_mod_product_U0_ap_ready;
        end
    end
end

assign Block_for_end_proc_U0_ap_continue = 1'b1;

assign Block_for_end_proc_U0_ap_start = a_V_1_loc_channel_empty_n;

assign Loop_VITIS_LOOP_93_1_proc_U0_ap_continue = a_V_1_loc_channel_full_n;

assign Loop_VITIS_LOOP_93_1_proc_U0_ap_start = t_V_empty_n;

assign ap_done = Block_for_end_proc_U0_ap_done;

assign ap_idle = (mod_product_U0_ap_idle & (1'b1 ^ a_V_1_loc_channel_empty_n) & (t_V_empty_n ^ 1'b1) & entry_proc_U0_ap_idle & Loop_VITIS_LOOP_93_1_proc_U0_ap_idle & Block_for_end_proc_U0_ap_idle);

assign ap_ready = ap_sync_ready;

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign ap_sync_entry_proc_U0_ap_ready = (entry_proc_U0_ap_ready | ap_sync_reg_entry_proc_U0_ap_ready);

assign ap_sync_mod_product_U0_ap_ready = (mod_product_U0_ap_ready | ap_sync_reg_mod_product_U0_ap_ready);

assign ap_sync_ready = (ap_sync_mod_product_U0_ap_ready & ap_sync_entry_proc_U0_ap_ready);

assign entry_proc_U0_ap_continue = 1'b1;

assign entry_proc_U0_ap_start = ((ap_sync_reg_entry_proc_U0_ap_ready ^ 1'b1) & ap_start);

assign mod_product_U0_ap_continue = t_V_full_n;

assign mod_product_U0_ap_start = ((ap_sync_reg_mod_product_U0_ap_ready ^ 1'b1) & ap_start);

endmodule //rsa
